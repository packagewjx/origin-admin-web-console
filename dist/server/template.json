{
  "apiVersion": "v1",
  "items": [
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "creationTimestamp": "2018-02-22T12:51:25Z",
        "name": "service-catalog-role-bindings",
        "namespace": "kube-service-catalog",
        "resourceVersion": "2634",
        "selfLink": "/oapi/v1/namespaces/kube-service-catalog/templates/service-catalog-role-bindings",
        "uid": "1775c60f-17cf-11e8-96ac-000af7b00488"
      },
      "objects": [
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrole",
          "metadata": {
            "name": "servicecatalog-serviceclass-viewer"
          },
          "rules": [
            {
              "apigroups": [
                "servicecatalog.k8s.io"
              ],
              "resources": [
                "clusterserviceclasses",
                "clusterserviceplans"
              ],
              "verbs": [
                "list",
                "watch",
                "get"
              ]
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "groupnames": [
            "system:authenticated"
          ],
          "kind": "clusterrolebinding",
          "metadata": {
            "name": "servicecatalog-serviceclass-viewer-binding"
          },
          "roleref": {
            "name": "servicecatalog-serviceclass-viewer"
          }
        },
        {
          "apiversion": "v1",
          "kind": "serviceaccount",
          "metadata": {
            "name": "service-catalog-controller"
          }
        },
        {
          "apiversion": "v1",
          "kind": "serviceaccount",
          "metadata": {
            "name": "service-catalog-apiserver"
          }
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrole",
          "metadata": {
            "name": "sar-creator"
          },
          "rules": [
            {
              "apigroups": [
                ""
              ],
              "resources": [
                "subjectaccessreviews.authorization.k8s.io"
              ],
              "verbs": [
                "create"
              ]
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrolebinding",
          "metadata": {
            "name": "service-catalog-sar-creator-binding"
          },
          "roleref": {
            "name": "sar-creator"
          },
          "subjects": [
            {
              "kind": "serviceaccount",
              "name": "service-catalog-apiserver",
              "namespace": "kube-service-catalog"
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrole",
          "metadata": {
            "name": "namespace-viewer"
          },
          "rules": [
            {
              "apigroups": [
                ""
              ],
              "resources": [
                "namespaces"
              ],
              "verbs": [
                "list",
                "watch",
                "get"
              ]
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrolebinding",
          "metadata": {
            "name": "service-catalog-namespace-viewer-binding"
          },
          "roleref": {
            "name": "namespace-viewer"
          },
          "subjects": [
            {
              "kind": "serviceaccount",
              "name": "service-catalog-apiserver",
              "namespace": "kube-service-catalog"
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrolebinding",
          "metadata": {
            "name": "service-catalog-controller-namespace-viewer-binding"
          },
          "roleref": {
            "name": "namespace-viewer"
          },
          "subjects": [
            {
              "kind": "serviceaccount",
              "name": "service-catalog-controller",
              "namespace": "kube-service-catalog"
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrole",
          "metadata": {
            "name": "service-catalog-controller"
          },
          "rules": [
            {
              "apigroups": [
                ""
              ],
              "resources": [
                "secrets"
              ],
              "verbs": [
                "create",
                "update",
                "patch",
                "delete",
                "get",
                "list",
                "watch"
              ]
            },
            {
              "apigroups": [
                "servicecatalog.k8s.io"
              ],
              "resources": [
                "clusterservicebrokers/status",
                "clusterserviceclasses/status",
                "clusterserviceplans/status",
                "serviceinstances/status",
                "servicebindings/status",
                "servicebindings/finalizers",
                "serviceinstances/reference"
              ],
              "verbs": [
                "update"
              ]
            },
            {
              "apigroups": [
                "servicecatalog.k8s.io"
              ],
              "resources": [
                "clusterservicebrokers",
                "serviceinstances",
                "servicebindings"
              ],
              "verbs": [
                "list",
                "get",
                "watch"
              ]
            },
            {
              "apigroups": [
                ""
              ],
              "resources": [
                "events"
              ],
              "verbs": [
                "patch",
                "create"
              ]
            },
            {
              "apigroups": [
                "servicecatalog.k8s.io"
              ],
              "resources": [
                "clusterserviceclasses",
                "clusterserviceplans"
              ],
              "verbs": [
                "create",
                "delete",
                "update",
                "patch",
                "get",
                "list",
                "watch"
              ]
            },
            {
              "apigroups": [
                "settings.k8s.io"
              ],
              "resources": [
                "podpresets"
              ],
              "verbs": [
                "create",
                "update",
                "delete",
                "get",
                "list",
                "watch"
              ]
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrolebinding",
          "metadata": {
            "name": "service-catalog-controller-binding"
          },
          "roleref": {
            "name": "service-catalog-controller"
          },
          "subjects": [
            {
              "kind": "serviceaccount",
              "name": "service-catalog-controller",
              "namespace": "kube-service-catalog"
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "role",
          "metadata": {
            "name": "endpoint-accessor"
          },
          "rules": [
            {
              "apigroups": [
                ""
              ],
              "resources": [
                "endpoints"
              ],
              "verbs": [
                "list",
                "watch",
                "get",
                "create",
                "update"
              ]
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "rolebinding",
          "metadata": {
            "name": "endpointer-accessor-binding"
          },
          "roleref": {
            "name": "endpoint-accessor",
            "namespace": "kube-service-catalog"
          },
          "subjects": [
            {
              "kind": "serviceaccount",
              "name": "service-catalog-controller",
              "namespace": "kube-service-catalog"
            }
          ]
        },
        {
          "apiversion": "authorization.openshift.io/v1",
          "kind": "clusterrolebinding",
          "metadata": {
            "name": "system:auth-delegator-binding"
          },
          "roleref": {
            "name": "system:auth-delegator"
          },
          "subjects": [
            {
              "kind": "serviceaccount",
              "name": "service-catalog-apiserver",
              "namespace": "kube-service-catalog"
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "creationTimestamp": "2018-02-22T12:51:35Z",
        "name": "kube-system-service-catalog-role-bindings",
        "namespace": "kube-system",
        "resourceVersion": "2677",
        "selfLink": "/oapi/v1/namespaces/kube-system/templates/kube-system-service-catalog-role-bindings",
        "uid": "1d8d0a7e-17cf-11e8-96ac-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "authorization.openshift.io/v1",
          "kind": "Role",
          "metadata": {
            "name": "extension-apiserver-authentication-reader",
            "namespace": "${KUBE_SYSTEM_NAMESPACE}"
          },
          "rules": [
            {
              "apiGroups": [
                ""
              ],
              "resourceNames": [
                "extension-apiserver-authentication"
              ],
              "resources": [
                "configmaps"
              ],
              "verbs": [
                "get"
              ]
            }
          ]
        },
        {
          "apiVersion": "authorization.openshift.io/v1",
          "kind": "RoleBinding",
          "metadata": {
            "name": "extension-apiserver-authentication-reader-binding",
            "namespace": "${KUBE_SYSTEM_NAMESPACE}"
          },
          "roleRef": {
            "name": "extension-apiserver-authentication-reader",
            "namespace": "${KUBE_SYSTEM_NAMESPACE}"
          },
          "subjects": [
            {
              "kind": "ServiceAccount",
              "name": "service-catalog-apiserver",
              "namespace": "kube-service-catalog"
            }
          ]
        }
      ],
      "parameters": [
        {
          "description": "Do not change this value.",
          "displayName": "Name of the kube-system namespace",
          "name": "KUBE_SYSTEM_NAMESPACE",
          "required": true,
          "value": "kube-system"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "creationTimestamp": "2018-02-24T11:35:26Z",
        "name": "local-storage-provisioner",
        "namespace": "openshift-ansible-service-broker",
        "resourceVersion": "322400",
        "selfLink": "/oapi/v1/namespaces/openshift-ansible-service-broker/templates/local-storage-provisioner",
        "uid": "ceedbe72-1956-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "ClusterRoleBinding",
          "metadata": {
            "name": "local-storage:provisioner-pv-binding"
          },
          "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "system:persistent-volume-provisioner"
          },
          "subjects": [
            {
              "kind": "ServiceAccount",
              "name": "${SERVICE_ACCOUNT}",
              "namespace": "${NAMESPACE}"
            }
          ]
        },
        {
          "apiVersion": "v1",
          "kind": "ClusterRoleBinding",
          "metadata": {
            "name": "local-storage:provisioner-node-binding"
          },
          "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "system:node"
          },
          "subjects": [
            {
              "kind": "ServiceAccount",
              "name": "${SERVICE_ACCOUNT}",
              "namespace": "${NAMESPACE}"
            }
          ]
        },
        {
          "apiVersion": "extensions/v1beta1",
          "kind": "DaemonSet",
          "metadata": {
            "name": "local-volume-provisioner"
          },
          "spec": {
            "template": {
              "metadata": {
                "labels": {
                  "app": "local-volume-provisioner"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MY_NODE_NAME",
                        "valueFrom": {
                          "fieldRef": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.nodeName"
                          }
                        }
                      },
                      {
                        "name": "MY_NAMESPACE",
                        "valueFrom": {
                          "fieldRef": {
                            "apiVersion": "v1",
                            "fieldPath": "metadata.namespace"
                          }
                        }
                      },
                      {
                        "name": "VOLUME_CONFIG_NAME",
                        "value": "${CONFIGMAP}"
                      }
                    ],
                    "image": "${PROVISIONER_IMAGE}",
                    "name": "provisioner",
                    "securityContext": {
                      "runAsUser": 0,
                      "seLinuxOptions": {
                        "level": "s0:c0.c1023"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/mnt/local-storage",
                        "name": "local-storage"
                      },
                      {
                        "mountPath": "/etc/provisioner/config",
                        "name": "provisioner-config",
                        "readOnly": true
                      }
                    ]
                  }
                ],
                "serviceAccountName": "${SERVICE_ACCOUNT}",
                "volumes": [
                  {
                    "hostPath": {
                      "path": "/mnt/local-storage"
                    },
                    "name": "local-storage"
                  },
                  {
                    "configMap": {
                      "name": "${CONFIGMAP}"
                    },
                    "name": "provisioner-config"
                  }
                ]
              }
            }
          }
        }
      ],
      "parameters": [
        {
          "description": "Name of service account that is able to run pods as root and use HostPath volumes.",
          "name": "SERVICE_ACCOUNT",
          "required": true,
          "value": "local-storage-admin"
        },
        {
          "description": "Name of namespace where local provisioners run",
          "name": "NAMESPACE",
          "required": true,
          "value": "local-storage"
        },
        {
          "description": "Name of ConfigMap with local provisioner configuration.",
          "name": "CONFIGMAP",
          "required": true,
          "value": "local-storage-admin"
        },
        {
          "description": "Name of image with local provisioner.",
          "name": "PROVISIONER_IMAGE",
          "required": true,
          "value": "quay.io/external_storage/local-volume-provisioner:v1.0.1"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "annotations": {
          "description": "3scale API Gateway",
          "iconClass": "icon-load-balancer",
          "tags": "api,gateway,3scale"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "3scale-gateway",
        "namespace": "openshift",
        "resourceVersion": "136020",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/3scale-gateway",
        "uid": "0730b441-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "${APICAST_NAME}"
          },
          "spec": {
            "replicas": 2,
            "selector": {
              "deploymentconfig": "${APICAST_NAME}"
            },
            "strategy": {
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "deploymentconfig": "${APICAST_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "THREESCALE_PORTAL_ENDPOINT",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "password",
                            "name": "${CONFIGURATION_URL_SECRET}"
                          }
                        }
                      },
                      {
                        "name": "THREESCALE_CONFIG_FILE",
                        "value": "${CONFIGURATION_FILE_PATH}"
                      },
                      {
                        "name": "THREESCALE_DEPLOYMENT_ENV",
                        "value": "${DEPLOYMENT_ENVIRONMENT}"
                      },
                      {
                        "name": "RESOLVER",
                        "value": "${RESOLVER}"
                      },
                      {
                        "name": "APICAST_SERVICES",
                        "value": "${SERVICES_LIST}"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_LOADER",
                        "value": "${CONFIGURATION_LOADER}"
                      },
                      {
                        "name": "APICAST_LOG_LEVEL",
                        "value": "${LOG_LEVEL}"
                      },
                      {
                        "name": "APICAST_PATH_ROUTING_ENABLED",
                        "value": "${PATH_ROUTING}"
                      },
                      {
                        "name": "APICAST_RESPONSE_CODES",
                        "value": "${RESPONSE_CODES}"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_CACHE",
                        "value": "${CONFIGURATION_CACHE}"
                      },
                      {
                        "name": "REDIS_URL",
                        "value": "${REDIS_URL}"
                      },
                      {
                        "name": "APICAST_MANAGEMENT_API",
                        "value": "${MANAGEMENT_API}"
                      },
                      {
                        "name": "OPENSSL_VERIFY",
                        "value": "${OPENSSL_VERIFY}"
                      }
                    ],
                    "image": "3scale-amp20/apicast-gateway:1.0-3",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/status/live",
                        "port": "management"
                      },
                      "initialDelaySeconds": 10,
                      "timeoutSeconds": 1
                    },
                    "name": "${APICAST_NAME}",
                    "ports": [
                      {
                        "containerPort": 8080,
                        "name": "proxy",
                        "protocol": "TCP"
                      },
                      {
                        "containerPort": 8090,
                        "name": "management",
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/status/ready",
                        "port": "management"
                      },
                      "initialDelaySeconds": 15,
                      "timeoutSeconds": 1
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "${APICAST_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "proxy",
                "port": 8080,
                "protocol": "TCP",
                "targetPort": 8080
              },
              {
                "name": "management",
                "port": 8090,
                "protocol": "TCP",
                "targetPort": 8090
              }
            ],
            "selector": {
              "deploymentconfig": "${APICAST_NAME}"
            }
          }
        }
      ],
      "parameters": [
        {
          "description": "AMP release tag.",
          "name": "AMP_RELEASE",
          "required": true,
          "value": "2.0.0-CR2-redhat-1"
        },
        {
          "description": "Name of the secret containing the THREESCALE_PORTAL_ENDPOINT with the access-token or provider key",
          "name": "CONFIGURATION_URL_SECRET",
          "required": true,
          "value": "apicast-configuration-url-secret"
        },
        {
          "description": "Path to saved JSON file with configuration for the gateway. Has to be injected to the docker image as read only volume.",
          "name": "CONFIGURATION_FILE_PATH"
        },
        {
          "description": "Deployment environment. Can be sandbox or production.",
          "name": "DEPLOYMENT_ENVIRONMENT",
          "required": true,
          "value": "production"
        },
        {
          "description": "Name for the 3scale API Gateway",
          "name": "APICAST_NAME",
          "required": true,
          "value": "apicast"
        },
        {
          "description": "DNS Resolver for openresty, if empty it will be autodiscovered",
          "name": "RESOLVER"
        },
        {
          "description": "Subset of services to run. Use comma separated list of service ids (eg. 42,1337)",
          "name": "SERVICES_LIST"
        },
        {
          "description": "When to load configuration. If on gateway start or incoming request. Allowed values are: lazy, boot.",
          "name": "CONFIGURATION_LOADER",
          "value": "boot"
        },
        {
          "description": "Log level. One of the following: debug, info, notice, warn, error, crit, alert, or emerg.",
          "name": "LOG_LEVEL"
        },
        {
          "description": "Enable path routing. Experimental feature.",
          "name": "PATH_ROUTING",
          "value": "false"
        },
        {
          "description": "Enable logging response codes to 3scale.",
          "name": "RESPONSE_CODES",
          "value": "false"
        },
        {
          "description": "For how long to cache the downloaded configuration in seconds. Can be left empty, 0 or greater than 60.",
          "name": "CONFIGURATION_CACHE"
        },
        {
          "description": "Redis URL. Required for OAuth2 integration. ex: redis://PASSWORD@127.0.0.1:6379/0",
          "name": "REDIS_URL"
        },
        {
          "description": "Scope of the Management API. Can be disabled, status or debug. At least status required for health checks.",
          "name": "MANAGEMENT_API",
          "value": "status"
        },
        {
          "description": "Turn on/off the OpenSSL peer verification. Can be set to true/false.",
          "name": "OPENSSL_VERIFY",
          "required": true,
          "value": "false"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "amp-apicast-wildcard-router",
        "namespace": "openshift",
        "resourceVersion": "136038",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/amp-apicast-wildcard-router",
        "uid": "0756b2cf-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "apicast-router"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "deploymentconfig": "apicast-router"
            },
            "strategy": {
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "deploymentconfig": "apicast-router"
                }
              },
              "spec": {
                "containers": [
                  {
                    "command": [
                      "bin/apicast"
                    ],
                    "env": [
                      {
                        "name": "APICAST_CONFIGURATION_LOADER",
                        "value": "lazy"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_CACHE",
                        "value": "0"
                      }
                    ],
                    "image": "3scale-amp20/apicast-gateway:1.0-3",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 5,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": "router"
                      },
                      "timeoutSeconds": 5
                    },
                    "name": "apicast-router",
                    "ports": [
                      {
                        "containerPort": 8082,
                        "name": "router",
                        "protocol": "TCP"
                      },
                      {
                        "containerPort": 8090,
                        "name": "management",
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/status/ready",
                        "port": "management"
                      },
                      "initialDelaySeconds": 5,
                      "periodSeconds": 30,
                      "timeoutSeconds": 5
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/opt/app-root/src/sites.d/",
                        "name": "apicast-router-config",
                        "readOnly": true
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "configMap": {
                      "items": [
                        {
                          "key": "router.conf",
                          "path": "router.conf"
                        }
                      ],
                      "name": "apicast-router-config"
                    },
                    "name": "apicast-router-config"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "apicast-router"
          },
          "spec": {
            "ports": [
              {
                "name": "router",
                "port": 80,
                "protocol": "TCP",
                "targetPort": "router"
              }
            ],
            "selector": {
              "deploymentconfig": "apicast-router"
            }
          }
        },
        {
          "apiVersion": "v1",
          "data": {
            "router.conf": "upstream wildcard {\n  server 0.0.0.1:1;\n\n  balancer_by_lua_block {\n    local round_robin = require 'resty.balancer.round_robin'\n    local balancer = round_robin.new()\n    local peers = balancer:peers(ngx.ctx.apicast)\n\n    local peer, err = balancer:set_peer(peers)\n\n    if not peer then\n      ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE\n      ngx.log(ngx.ERR, \"failed to set current backend peer: \", err)\n      ngx.exit(ngx.status)\n    end\n  }\n\n  keepalive 1024;\n}\n\nserver {\n  listen 8082;\n  server_name ~-(?\u003capicast\u003eapicast-(staging|production))\\.;\n  access_log /dev/stdout combined;\n\n  location / {\n    access_by_lua_block {\n      local resolver = require('resty.resolver'):instance()\n      local servers = resolver:get_servers(ngx.var.apicast, { port = 8080 })\n\n      if #servers == 0 then\n        ngx.status = ngx.HTTP_BAD_GATEWAY\n        ngx.exit(ngx.HTTP_OK)\n      end\n\n      ngx.ctx.apicast = servers\n    }\n    proxy_http_version 1.1;\n    proxy_pass $scheme://wildcard;\n    proxy_set_header Host $host;\n    proxy_set_header Connection \"\";\n  }\n}"
          },
          "kind": "ConfigMap",
          "metadata": {
            "name": "apicast-router-config"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "labels": {
              "app": "apicast-wildcard-router"
            },
            "name": "apicast-wildcard-router"
          },
          "spec": {
            "host": "apicast-${TENANT_NAME}.${WILDCARD_DOMAIN}",
            "port": {
              "targetPort": "router"
            },
            "tls": {
              "insecureEdgeTerminationPolicy": "Allow",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "apicast-router"
            },
            "wildcardPolicy": "Subdomain"
          }
        }
      ],
      "parameters": [
        {
          "description": "AMP release tag.",
          "name": "AMP_RELEASE",
          "required": true,
          "value": "2.0.0-CR2-redhat-1"
        },
        {
          "description": "Root domain for the wildcard routes. Eg. example.com will generate 3scale-admin.example.com.",
          "name": "WILDCARD_DOMAIN",
          "required": true
        },
        {
          "description": "Domain name under the root that Admin UI will be available with -admin suffix.",
          "name": "TENANT_NAME",
          "required": true,
          "value": "3scale"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "amp-pvc",
        "namespace": "openshift",
        "resourceVersion": "136035",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/amp-pvc",
        "uid": "07520902-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "system-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteMany"
            ],
            "resources": {
              "requests": {
                "storage": "100Mi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "mysql-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "system-redis-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "backend-redis-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "cakephp-mysql-example"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/cake-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example CakePHP application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/cakephp-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
          "iconClass": "icon-php",
          "openshift.io/display-name": "CakePHP + MySQL (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/openshift/cakephp-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a CakePHP application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,php,cakephp",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "cakephp-mysql-example",
        "namespace": "openshift",
        "resourceVersion": "136022",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/cakephp-mysql-example",
        "uid": "0733bd4d-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "cakephp-secret-token": "${CAKEPHP_SECRET_TOKEN}",
            "cakephp-security-cipher-seed": "${CAKEPHP_SECURITY_CIPHER_SEED}",
            "cakephp-security-salt": "${CAKEPHP_SECURITY_SALT}",
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "./lib/Cake/Console/cake test app AllTests"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "COMPOSER_MIRROR",
                    "value": "${COMPOSER_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "php:7.0",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "recreateParams": {
                "pre": {
                  "execNewPod": {
                    "command": [
                      "./migrate-database.sh"
                    ],
                    "containerName": "cakephp-mysql-example"
                  },
                  "failurePolicy": "Retry"
                }
              },
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "DATABASE_ENGINE",
                        "value": "${DATABASE_ENGINE}"
                      },
                      {
                        "name": "DATABASE_NAME",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "DATABASE_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "DATABASE_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "CAKEPHP_SECRET_TOKEN",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "cakephp-secret-token",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "CAKEPHP_SECURITY_SALT",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "cakephp-security-salt",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "CAKEPHP_SECURITY_CIPHER_SEED",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "cakephp-security-cipher-seed",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "OPCACHE_REVALIDATE_FREQ",
                        "value": "${OPCACHE_REVALIDATE_FREQ}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/health.php",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "cakephp-mysql-example",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/health.php",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "cakephp-mysql-example"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mysql",
                "port": 3306,
                "targetPort": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mysql",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_MYSQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {},
                    "name": "data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mysql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mysql:5.7",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "cakephp-mysql-example"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the CakePHP container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the MySQL container can use.",
          "displayName": "Memory Limit (MySQL)",
          "name": "MEMORY_MYSQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/cakephp-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mysql"
        },
        {
          "description": "Database engine: postgresql, mysql or sqlite (default).",
          "displayName": "Database Engine",
          "name": "DATABASE_ENGINE",
          "required": true,
          "value": "mysql"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "default"
        },
        {
          "displayName": "Database User",
          "name": "DATABASE_USER",
          "required": true,
          "value": "cakephp"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "description": "Set this to a long random string.",
          "displayName": "CakePHP secret token",
          "from": "[\\w]{50}",
          "generate": "expression",
          "name": "CAKEPHP_SECRET_TOKEN"
        },
        {
          "description": "Security salt for session hash.",
          "displayName": "CakePHP Security Salt",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "CAKEPHP_SECURITY_SALT"
        },
        {
          "description": "Security cipher seed for session hash.",
          "displayName": "CakePHP Security Cipher Seed",
          "from": "[0-9]{30}",
          "generate": "expression",
          "name": "CAKEPHP_SECURITY_CIPHER_SEED"
        },
        {
          "description": "How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.",
          "displayName": "OPcache Revalidation Frequency",
          "name": "OPCACHE_REVALIDATE_FREQ",
          "value": "2"
        },
        {
          "description": "The custom Composer mirror URL",
          "displayName": "Custom Composer Mirror URL",
          "name": "COMPOSER_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "cakephp-mysql-persistent"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/cake-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example CakePHP application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/cakephp-ex/blob/master/README.md.",
          "iconClass": "icon-php",
          "openshift.io/display-name": "CakePHP + MySQL (Persistent)",
          "openshift.io/documentation-url": "https://github.com/openshift/cakephp-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a CakePHP application, including a build configuration, application deployment configuration, and database deployment configuration.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,php,cakephp",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "cakephp-mysql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136021",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/cakephp-mysql-persistent",
        "uid": "0731bddd-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "cakephp-secret-token": "${CAKEPHP_SECRET_TOKEN}",
            "cakephp-security-cipher-seed": "${CAKEPHP_SECURITY_CIPHER_SEED}",
            "cakephp-security-salt": "${CAKEPHP_SECURITY_SALT}",
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "./lib/Cake/Console/cake test app AllTests"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "COMPOSER_MIRROR",
                    "value": "${COMPOSER_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "php:7.0",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "recreateParams": {
                "pre": {
                  "execNewPod": {
                    "command": [
                      "./migrate-database.sh"
                    ],
                    "containerName": "cakephp-mysql-persistent"
                  },
                  "failurePolicy": "Retry"
                }
              },
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "DATABASE_ENGINE",
                        "value": "${DATABASE_ENGINE}"
                      },
                      {
                        "name": "DATABASE_NAME",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "DATABASE_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "DATABASE_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "CAKEPHP_SECRET_TOKEN",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "cakephp-secret-token",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "CAKEPHP_SECURITY_SALT",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "cakephp-security-salt",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "CAKEPHP_SECURITY_CIPHER_SEED",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "cakephp-security-cipher-seed",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "OPCACHE_REVALIDATE_FREQ",
                        "value": "${OPCACHE_REVALIDATE_FREQ}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/health.php",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "cakephp-mysql-persistent",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/health.php",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "cakephp-mysql-persistent"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mysql",
                "port": 3306,
                "targetPort": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mysql",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_MYSQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mysql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mysql:5.7",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "cakephp-mysql-persistent"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the CakePHP container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the MySQL container can use.",
          "displayName": "Memory Limit (MySQL)",
          "name": "MEMORY_MYSQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/cakephp-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mysql"
        },
        {
          "description": "Database engine: postgresql, mysql or sqlite (default).",
          "displayName": "Database Engine",
          "name": "DATABASE_ENGINE",
          "required": true,
          "value": "mysql"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "default"
        },
        {
          "displayName": "Database User",
          "name": "DATABASE_USER",
          "required": true,
          "value": "cakephp"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "description": "Set this to a long random string.",
          "displayName": "CakePHP secret token",
          "from": "[\\w]{50}",
          "generate": "expression",
          "name": "CAKEPHP_SECRET_TOKEN"
        },
        {
          "description": "Security salt for session hash.",
          "displayName": "CakePHP Security Salt",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "CAKEPHP_SECURITY_SALT"
        },
        {
          "description": "Security cipher seed for session hash.",
          "displayName": "CakePHP Security Cipher Seed",
          "from": "[0-9]{30}",
          "generate": "expression",
          "name": "CAKEPHP_SECURITY_CIPHER_SEED"
        },
        {
          "description": "How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.",
          "displayName": "OPcache Revalidation Frequency",
          "name": "OPCACHE_REVALIDATE_FREQ",
          "value": "2"
        },
        {
          "description": "The custom Composer mirror URL",
          "displayName": "Custom Composer Mirror URL",
          "name": "COMPOSER_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "dancer-mysql-example"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Dancer application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
          "iconClass": "icon-perl",
          "openshift.io/display-name": "Dancer + MySQL (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/openshift/dancer-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a Dancer based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,perl,dancer",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "dancer-mysql-example",
        "namespace": "openshift",
        "resourceVersion": "136024",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/dancer-mysql-example",
        "uid": "07374c0c-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}",
            "keybase": "${SECRET_KEY_BASE}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "perl -I extlib/lib/perl5 -I lib t/*"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "CPAN_MIRROR",
                    "value": "${CPAN_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "perl:5.24",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "keybase",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "PERL_APACHE2_RELOAD",
                        "value": "${PERL_APACHE2_RELOAD}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "dancer-mysql-example",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "dancer-mysql-example"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mysql",
                "port": 3306,
                "targetPort": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mysql",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_MYSQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {},
                    "name": "data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mysql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mysql:5.7",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "dancer-mysql-example"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Perl Dancer container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the MySQL container can use.",
          "displayName": "Memory Limit (MySQL)",
          "name": "MEMORY_MYSQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/dancer-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Dancer service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "database"
        },
        {
          "displayName": "Database Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{8}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Set this to \"true\" to enable automatic reloading of modified Perl modules.",
          "displayName": "Perl Module Reload",
          "name": "PERL_APACHE2_RELOAD"
        },
        {
          "description": "Your secret key for verifying the integrity of signed cookies.",
          "displayName": "Secret Key",
          "from": "[a-z0-9]{127}",
          "generate": "expression",
          "name": "SECRET_KEY_BASE"
        },
        {
          "description": "The custom CPAN mirror URL",
          "displayName": "Custom CPAN Mirror URL",
          "name": "CPAN_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "dancer-mysql-persistent"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Dancer application with a MySQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/dancer-ex/blob/master/README.md.",
          "iconClass": "icon-perl",
          "openshift.io/display-name": "Dancer + MySQL (Persistent)",
          "openshift.io/documentation-url": "https://github.com/openshift/dancer-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a Dancer based application, including a build configuration, application deployment configuration, and database deployment configuration.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,perl,dancer",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "dancer-mysql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136023",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/dancer-mysql-persistent",
        "uid": "073584b9-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}",
            "keybase": "${SECRET_KEY_BASE}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "perl -I extlib/lib/perl5 -I lib t/*"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "CPAN_MIRROR",
                    "value": "${CPAN_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "perl:5.24",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "keybase",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "PERL_APACHE2_RELOAD",
                        "value": "${PERL_APACHE2_RELOAD}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "dancer-mysql-persistent",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "dancer-mysql-persistent"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mysql",
                "port": 3306,
                "targetPort": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mysql",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD='${DATABASE_PASSWORD}' mysql -h 127.0.0.1 -u ${DATABASE_USER} -D ${DATABASE_NAME} -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_MYSQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mysql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mysql:5.7",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "dancer-mysql-persistent"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Perl Dancer container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the MySQL container can use.",
          "displayName": "Memory Limit (MySQL)",
          "name": "MEMORY_MYSQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/dancer-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Dancer service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "database"
        },
        {
          "displayName": "Database Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{8}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Set this to \"true\" to enable automatic reloading of modified Perl modules.",
          "displayName": "Perl Module Reload",
          "name": "PERL_APACHE2_RELOAD"
        },
        {
          "description": "Your secret key for verifying the integrity of signed cookies.",
          "displayName": "Secret Key",
          "from": "[a-z0-9]{127}",
          "generate": "expression",
          "name": "SECRET_KEY_BASE"
        },
        {
          "description": "The custom CPAN mirror URL",
          "displayName": "Custom CPAN Mirror URL",
          "name": "CPAN_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "django-psql-example"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Django application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
          "iconClass": "icon-python",
          "openshift.io/display-name": "Django + PostgreSQL (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/openshift/django-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a Django based application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,python,django",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "django-psql-example",
        "namespace": "openshift",
        "resourceVersion": "136026",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/django-psql-example",
        "uid": "073e46ff-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}",
            "django-secret-key": "${DJANGO_SECRET_KEY}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "./manage.py test"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "PIP_INDEX_URL",
                    "value": "${PIP_INDEX_URL}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "python:3.5",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "DATABASE_ENGINE",
                        "value": "${DATABASE_ENGINE}"
                      },
                      {
                        "name": "DATABASE_NAME",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "DATABASE_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "DATABASE_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "APP_CONFIG",
                        "value": "${APP_CONFIG}"
                      },
                      {
                        "name": "DJANGO_SECRET_KEY",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "django-secret-key",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "django-psql-example",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "django-psql-example"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "port": 5432,
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {},
                    "name": "data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:9.5",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "django-psql-example"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Django container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the PostgreSQL container can use.",
          "displayName": "Memory Limit (PostgreSQL)",
          "name": "MEMORY_POSTGRESQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/django-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Django service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "description": "Database engine: postgresql, mysql or sqlite (default).",
          "displayName": "Database Engine",
          "name": "DATABASE_ENGINE",
          "required": true,
          "value": "postgresql"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "default"
        },
        {
          "displayName": "Database Username",
          "name": "DATABASE_USER",
          "required": true,
          "value": "django"
        },
        {
          "displayName": "Database User Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "description": "Relative path to Gunicorn configuration file (optional).",
          "displayName": "Application Configuration File Path",
          "name": "APP_CONFIG"
        },
        {
          "description": "Set this to a long random string.",
          "displayName": "Django Secret Key",
          "from": "[\\w]{50}",
          "generate": "expression",
          "name": "DJANGO_SECRET_KEY"
        },
        {
          "description": "The custom PyPi index URL",
          "displayName": "Custom PyPi Index URL",
          "name": "PIP_INDEX_URL"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "django-psql-persistent"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Django application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/django-ex/blob/master/README.md.",
          "iconClass": "icon-python",
          "openshift.io/display-name": "Django + PostgreSQL (Persistent)",
          "openshift.io/documentation-url": "https://github.com/openshift/django-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a Django based application, including a build configuration, application deployment configuration, and database deployment configuration.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,python,django",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "django-psql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136025",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/django-psql-persistent",
        "uid": "07391b03-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}",
            "django-secret-key": "${DJANGO_SECRET_KEY}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "./manage.py test"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "PIP_INDEX_URL",
                    "value": "${PIP_INDEX_URL}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "python:3.5",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "DATABASE_ENGINE",
                        "value": "${DATABASE_ENGINE}"
                      },
                      {
                        "name": "DATABASE_NAME",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "DATABASE_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "DATABASE_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "APP_CONFIG",
                        "value": "${APP_CONFIG}"
                      },
                      {
                        "name": "DJANGO_SECRET_KEY",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "django-secret-key",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "django-psql-persistent",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/health",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "django-psql-persistent"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "port": 5432,
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:9.5",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "django-psql-persistent"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Django container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the PostgreSQL container can use.",
          "displayName": "Memory Limit (PostgreSQL)",
          "name": "MEMORY_POSTGRESQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/django-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Django service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "description": "Database engine: postgresql, mysql or sqlite (default).",
          "displayName": "Database Engine",
          "name": "DATABASE_ENGINE",
          "required": true,
          "value": "postgresql"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "default"
        },
        {
          "displayName": "Database Username",
          "name": "DATABASE_USER",
          "required": true,
          "value": "django"
        },
        {
          "displayName": "Database User Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "description": "Relative path to Gunicorn configuration file (optional).",
          "displayName": "Application Configuration File Path",
          "name": "APP_CONFIG"
        },
        {
          "description": "Set this to a long random string.",
          "displayName": "Django Secret Key",
          "from": "[\\w]{50}",
          "generate": "expression",
          "name": "DJANGO_SECRET_KEY"
        },
        {
          "description": "The custom PyPi index URL",
          "displayName": "Custom PyPi Index URL",
          "name": "PIP_INDEX_URL"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "annotations": {
          "description": "An example .NET Core application.",
          "iconClass": "icon-dotnet",
          "openshift.io/display-name": ".NET Core Example",
          "tags": "quickstart,dotnet,.net",
          "template.openshift.io/documentation-url": "https://github.com/redhat-developer/s2i-dotnetcore",
          "template.openshift.io/provider-display-name": "Red Hat, Inc.",
          "template.openshift.io/support-url": "https://access.redhat.com"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "dotnet-example",
        "namespace": "openshift",
        "resourceVersion": "136027",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/dotnet-example",
        "uid": "07400716-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "DOTNET_STARTUP_PROJECT",
                    "value": "${DOTNET_STARTUP_PROJECT}"
                  },
                  {
                    "name": "DOTNET_ASSEMBLY_NAME",
                    "value": "${DOTNET_ASSEMBLY_NAME}"
                  },
                  {
                    "name": "DOTNET_NPM_TOOLS",
                    "value": "${DOTNET_NPM_TOOLS}"
                  },
                  {
                    "name": "DOTNET_TEST_PROJECTS",
                    "value": "${DOTNET_TEST_PROJECTS}"
                  },
                  {
                    "name": "DOTNET_CONFIGURATION",
                    "value": "${DOTNET_CONFIGURATION}"
                  },
                  {
                    "name": "DOTNET_PUBLISH",
                    "value": "true"
                  },
                  {
                    "name": "DOTNET_RESTORE_SOURCES",
                    "value": "${DOTNET_RESTORE_SOURCES}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "${DOTNET_IMAGE_STREAM_TAG}",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              },
              {
                "generic": {
                  "secret": "${GENERIC_WEBHOOK_SECRET}"
                },
                "type": "Generic"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 40,
                      "timeoutSeconds": 15
                    },
                    "name": "dotnet-app",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 10,
                      "timeoutSeconds": 30
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "dotnet-app"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "dotnet-example"
        },
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The image stream tag which is used to build the code.",
          "displayName": ".NET builder",
          "name": "DOTNET_IMAGE_STREAM_TAG",
          "required": true,
          "value": "dotnet:2.0"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/redhat-developer/s2i-dotnetcore-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF",
          "value": "dotnetcore-2.0"
        },
        {
          "description": "Set this to use a subdirectory of the source code repository",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the .NET Core service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "A secret string used to configure the GitHub webhook.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "A secret string used to configure the Generic webhook.",
          "displayName": "Generic Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GENERIC_WEBHOOK_SECRET"
        },
        {
          "description": "Set this to a project file (e.g. csproj) or a folder containing a single project file.",
          "displayName": "Startup Project",
          "name": "DOTNET_STARTUP_PROJECT",
          "value": "app"
        },
        {
          "description": "Set this when the assembly name is overridden in the project file.",
          "displayName": "Startup Assembly",
          "name": "DOTNET_ASSEMBLY_NAME"
        },
        {
          "description": "Set this to a space separated list of npm tools needed to publish.",
          "displayName": "Npm Tools",
          "name": "DOTNET_NPM_TOOLS",
          "value": "bower gulp"
        },
        {
          "description": "Set this to a space separated list of test projects to run before publishing.",
          "displayName": "Test projects",
          "name": "DOTNET_TEST_PROJECTS"
        },
        {
          "description": "Set this to configuration (Release/Debug).",
          "displayName": "Configuration",
          "name": "DOTNET_CONFIGURATION",
          "value": "Release"
        },
        {
          "description": "Set this to override the NuGet.config sources.",
          "displayName": "NuGet package sources",
          "name": "DOTNET_RESTORE_SOURCES"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "dotnet-pgsql-persistent"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore.",
      "metadata": {
        "annotations": {
          "description": "An example .NET Core application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/redhat-developer/s2i-dotnetcore.",
          "iconClass": "icon-dotnet",
          "openshift.io/display-name": ".NET Core + PostgreSQL (Persistent)",
          "tags": "quickstart,dotnet",
          "template.openshift.io/documentation-url": "https://github.com/redhat-developer/s2i-dotnetcore",
          "template.openshift.io/provider-display-name": "Red Hat, Inc.",
          "template.openshift.io/support-url": "https://access.redhat.com"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "dotnet-pgsql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136028",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/dotnet-pgsql-persistent",
        "uid": "07421dc0-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "connect-string": "Host=${DATABASE_SERVICE_NAME};Database=${DATABASE_NAME};Username=${DATABASE_USER};Password=${DATABASE_PASSWORD}",
            "database-password": "${DATABASE_PASSWORD}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {},
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "DOTNET_STARTUP_PROJECT",
                    "value": "${DOTNET_STARTUP_PROJECT}"
                  },
                  {
                    "name": "DOTNET_ASSEMBLY_NAME",
                    "value": "${DOTNET_ASSEMBLY_NAME}"
                  },
                  {
                    "name": "DOTNET_NPM_TOOLS",
                    "value": "${DOTNET_NPM_TOOLS}"
                  },
                  {
                    "name": "DOTNET_TEST_PROJECTS",
                    "value": "${DOTNET_TEST_PROJECTS}"
                  },
                  {
                    "name": "DOTNET_CONFIGURATION",
                    "value": "${DOTNET_CONFIGURATION}"
                  },
                  {
                    "name": "DOTNET_PUBLISH",
                    "value": "true"
                  },
                  {
                    "name": "DOTNET_RESTORE_SOURCES",
                    "value": "${DOTNET_RESTORE_SOURCES}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "${DOTNET_IMAGE_STREAM_TAG}",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "resources": {},
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "ConnectionString",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "connect-string",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 40,
                      "timeoutSeconds": 10
                    },
                    "name": "dotnet-pgsql-persistent",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 10,
                      "timeoutSeconds": 30
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "dotnet-pgsql-persistent"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "port": 5432,
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "value": "${DATABASE_USER}"
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                      },
                      {
                        "name": "POSTGRESQL_SHARED_BUFFERS",
                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:9.5",
                    "namespace": "openshift"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "musicstore"
        },
        {
          "description": "Maximum amount of memory the .NET Core container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the PostgreSQL container can use.",
          "displayName": "Memory Limit (PostgreSQL)",
          "name": "MEMORY_POSTGRESQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The image stream tag which is used to build the code.",
          "displayName": ".NET builder",
          "name": "DOTNET_IMAGE_STREAM_TAG",
          "required": true,
          "value": "dotnet:2.0"
        },
        {
          "description": "The OpenShift Namespace where the .NET builder ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/redhat-developer/s2i-aspnet-musicstore-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF",
          "value": "rel/2.0-example"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "Set this to a project file (e.g. csproj) or a folder containing a single project file.",
          "displayName": "Startup Project",
          "name": "DOTNET_STARTUP_PROJECT",
          "value": "samples/MusicStore"
        },
        {
          "description": "Set this when the assembly name is overridden in the project file.",
          "displayName": "Startup Assembly",
          "name": "DOTNET_ASSEMBLY_NAME"
        },
        {
          "description": "Set this to a space separated list of npm tools needed to publish.",
          "displayName": "Npm Tools",
          "name": "DOTNET_NPM_TOOLS"
        },
        {
          "description": "Set this to a space separated list of test projects to run before publishing.",
          "displayName": "Test projects",
          "name": "DOTNET_TEST_PROJECTS"
        },
        {
          "description": "Set this to configuration (Release/Debug).",
          "displayName": "Configuration",
          "name": "DOTNET_CONFIGURATION",
          "value": "Release"
        },
        {
          "description": "Set this to override the NuGet.config sources.",
          "displayName": "NuGet package sources",
          "name": "DOTNET_RESTORE_SOURCES"
        },
        {
          "description": "The exposed hostname that will route to the .NET Core service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "A secret string used to configure the GitHub webhook.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "displayName": "Database Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{8}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "musicstore"
        },
        {
          "displayName": "Maximum Database Connections",
          "name": "POSTGRESQL_MAX_CONNECTIONS",
          "value": "100"
        },
        {
          "displayName": "Shared Buffer Amount",
          "name": "POSTGRESQL_SHARED_BUFFERS",
          "value": "12MB"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "metadata": {
        "annotations": {
          "description": "An example .NET Core Runtime example application.",
          "iconClass": "icon-dotnet",
          "openshift.io/display-name": ".NET Core Runtime Example",
          "tags": "quickstart,dotnet,.net",
          "template.openshift.io/documentation-url": "https://github.com/redhat-developer/s2i-dotnetcore",
          "template.openshift.io/provider-display-name": "Red Hat, Inc.",
          "template.openshift.io/support-url": "https://access.redhat.com"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "dotnet-runtime-example",
        "namespace": "openshift",
        "resourceVersion": "136029",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/dotnet-runtime-example",
        "uid": "07438925-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application runtime image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application builder image"
            },
            "name": "${NAME}-build"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application"
            },
            "name": "${NAME}-build"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}-build:latest"
              }
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "DOTNET_STARTUP_PROJECT",
                    "value": "${DOTNET_STARTUP_PROJECT}"
                  },
                  {
                    "name": "DOTNET_ASSEMBLY_NAME",
                    "value": "${DOTNET_ASSEMBLY_NAME}"
                  },
                  {
                    "name": "DOTNET_NPM_TOOLS",
                    "value": "${DOTNET_NPM_TOOLS}"
                  },
                  {
                    "name": "DOTNET_TEST_PROJECTS",
                    "value": "${DOTNET_TEST_PROJECTS}"
                  },
                  {
                    "name": "DOTNET_CONFIGURATION",
                    "value": "${DOTNET_CONFIGURATION}"
                  },
                  {
                    "name": "DOTNET_RESTORE_SOURCES",
                    "value": "${DOTNET_RESTORE_SOURCES}"
                  },
                  {
                    "name": "DOTNET_PACK",
                    "value": "true"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "${DOTNET_BUILD_IMAGE_STREAM_TAG}",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              },
              {
                "generic": {
                  "secret": "${GENERIC_WEBHOOK_SECRET}"
                },
                "type": "Generic"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to chain the runtime image from the source build image"
            },
            "name": "${NAME}-runtime"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "source": {
              "dockerfile": "FROM ${DOTNET_RUNTIME_IMAGE_STREAM_TAG}\nADD app.tar.gz .",
              "images": [
                {
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}-build:latest"
                  },
                  "paths": [
                    {
                      "destinationDir": ".",
                      "sourcePath": "/opt/app-root/app.tar.gz"
                    }
                  ]
                }
              ]
            },
            "strategy": {
              "dockerStrategy": {
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "${DOTNET_RUNTIME_IMAGE_STREAM_TAG}",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Docker"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "imageChange": {
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}-build:latest"
                  }
                },
                "type": "ImageChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server"
            },
            "name": "${NAME}-runtime"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 40,
                      "timeoutSeconds": 15
                    },
                    "name": "dotnet-runtime-app",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 10,
                      "timeoutSeconds": 30
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "dotnet-runtime-app"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "dotnet-runtime-example"
        },
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The image stream tag which is used to run the application.",
          "displayName": ".NET Runtime Imagestream Tag",
          "name": "DOTNET_RUNTIME_IMAGE_STREAM_TAG",
          "required": true,
          "value": "dotnet-runtime:2.0"
        },
        {
          "description": "The image stream tag which is used to build the application.",
          "displayName": ".NET builder",
          "name": "DOTNET_BUILD_IMAGE_STREAM_TAG",
          "required": true,
          "value": "dotnet:2.0"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "The exposed hostname that will route to the .NET Core service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/redhat-developer/s2i-dotnetcore-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF",
          "value": "dotnetcore-2.0"
        },
        {
          "description": "Set this to use a subdirectory of the source code repository",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "A secret string used to configure the GitHub webhook.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "A secret string used to configure the Generic webhook.",
          "displayName": "Generic Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GENERIC_WEBHOOK_SECRET"
        },
        {
          "description": "Set this to the folder containing your startup project.",
          "displayName": "Startup Project",
          "name": "DOTNET_STARTUP_PROJECT",
          "value": "app"
        },
        {
          "description": "Set this when the assembly name is overridden in the project file.",
          "displayName": "Startup Assembly",
          "name": "DOTNET_ASSEMBLY_NAME"
        },
        {
          "description": "Set this to a space separated list of npm tools needed to publish.",
          "displayName": "Npm Tools",
          "name": "DOTNET_NPM_TOOLS",
          "value": "bower gulp"
        },
        {
          "description": "Set this to a space separated list of test projects to run before publishing.",
          "displayName": "Test projects",
          "name": "DOTNET_TEST_PROJECTS"
        },
        {
          "description": "Set this to configuration (Release/Debug).",
          "displayName": "Configuration",
          "name": "DOTNET_CONFIGURATION",
          "value": "Release"
        },
        {
          "description": "Set this to override the NuGet.config sources.",
          "displayName": "NuGet package sources",
          "name": "DOTNET_RESTORE_SOURCES"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "httpd-example"
      },
      "message": "The following service(s) have been created in your project: ${NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/httpd-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Apache HTTP Server (httpd) application that serves static content. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/httpd-ex/blob/master/README.md.",
          "iconClass": "icon-apache",
          "openshift.io/display-name": "Apache HTTP Server",
          "openshift.io/documentation-url": "https://github.com/openshift/httpd-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a static application served by Apache HTTP Server (httpd), including a build configuration and application deployment configuration.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,httpd",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "httpd-example",
        "namespace": "openshift",
        "resourceVersion": "136030",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/httpd-example",
        "uid": "0745291b-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "httpd:2.4",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              },
              {
                "generic": {
                  "secret": "${GENERIC_WEBHOOK_SECRET}"
                },
                "type": "Generic"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "httpd-example",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "httpd-example"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "httpd-example"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/httpd-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the httpd service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "A secret string used to configure the Generic webhook.",
          "displayName": "Generic Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GENERIC_WEBHOOK_SECRET"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "jenkins-ephemeral-template"
      },
      "message": "A Jenkins service has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.",
      "metadata": {
        "annotations": {
          "description": "Jenkins service, without persistent storage.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
          "iconClass": "icon-jenkins",
          "openshift.io/display-name": "Jenkins (Ephemeral)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/other_images/jenkins.html",
          "openshift.io/long-description": "This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.  The Jenkins configuration is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "instant-app,jenkins"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "jenkins-ephemeral",
        "namespace": "openshift",
        "resourceVersion": "136031",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/jenkins-ephemeral",
        "uid": "0746e57a-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "http://{.spec.host}{.spec.path}"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "tls": {
              "insecureEdgeTerminationPolicy": "Redirect",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "${JENKINS_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${JENKINS_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${JENKINS_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "OPENSHIFT_ENABLE_OAUTH",
                        "value": "${ENABLE_OAUTH}"
                      },
                      {
                        "name": "OPENSHIFT_ENABLE_REDIRECT_PROMPT",
                        "value": "true"
                      },
                      {
                        "name": "KUBERNETES_MASTER",
                        "value": "https://kubernetes.default:443"
                      },
                      {
                        "name": "KUBERNETES_TRUST_CERTIFICATES",
                        "value": "true"
                      },
                      {
                        "name": "JENKINS_SERVICE_NAME",
                        "value": "${JENKINS_SERVICE_NAME}"
                      },
                      {
                        "name": "JNLP_SERVICE_NAME",
                        "value": "${JNLP_SERVICE_NAME}"
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "failureThreshold": 30,
                      "httpGet": {
                        "path": "/login",
                        "port": 8080
                      },
                      "initialDelaySeconds": 420,
                      "timeoutSeconds": 3
                    },
                    "name": "jenkins",
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/login",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/jenkins",
                        "name": "${JENKINS_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "serviceAccountName": "${JENKINS_SERVICE_NAME}",
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${JENKINS_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "jenkins"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${JENKINS_IMAGE_STREAM_TAG}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "annotations": {
              "serviceaccounts.openshift.io/oauth-redirectreference.jenkins": "{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"${JENKINS_SERVICE_NAME}\"}}"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "groupNames": null,
          "kind": "RoleBinding",
          "metadata": {
            "name": "${JENKINS_SERVICE_NAME}_edit"
          },
          "roleRef": {
            "name": "edit"
          },
          "subjects": [
            {
              "kind": "ServiceAccount",
              "name": "${JENKINS_SERVICE_NAME}"
            }
          ]
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "${JNLP_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "agent",
                "nodePort": 0,
                "port": 50000,
                "protocol": "TCP",
                "targetPort": 50000
              }
            ],
            "selector": {
              "name": "${JENKINS_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${JNLP_SERVICE_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]",
              "service.openshift.io/infrastructure": "true"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "nodePort": 0,
                "port": 80,
                "protocol": "TCP",
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${JENKINS_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          }
        }
      ],
      "parameters": [
        {
          "description": "The name of the OpenShift Service exposed for the Jenkins container.",
          "displayName": "Jenkins Service Name",
          "name": "JENKINS_SERVICE_NAME",
          "value": "jenkins"
        },
        {
          "description": "The name of the service used for master/slave communication.",
          "displayName": "Jenkins JNLP Service Name",
          "name": "JNLP_SERVICE_NAME",
          "value": "jenkins-jnlp"
        },
        {
          "description": "Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.",
          "displayName": "Enable OAuth in Jenkins",
          "name": "ENABLE_OAUTH",
          "value": "true"
        },
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the Jenkins ImageStream resides.",
          "displayName": "Jenkins ImageStream Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "Name of the ImageStreamTag to be used for the Jenkins image.",
          "displayName": "Jenkins ImageStreamTag",
          "name": "JENKINS_IMAGE_STREAM_TAG",
          "value": "jenkins:latest"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "jenkins-persistent-template"
      },
      "message": "A Jenkins service has been created in your project.  Log into Jenkins with your OpenShift account.  The tutorial at https://github.com/openshift/origin/blob/master/examples/jenkins/README.md contains more information about using this template.",
      "metadata": {
        "annotations": {
          "description": "Jenkins service, with persistent storage.\n\nNOTE: You must have persistent volumes available in your cluster to use this template.",
          "iconClass": "icon-jenkins",
          "openshift.io/display-name": "Jenkins (Persistent)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/other_images/jenkins.html",
          "openshift.io/long-description": "This template deploys a Jenkins server capable of managing OpenShift Pipeline builds and supporting OpenShift-based oauth login.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "instant-app,jenkins"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "jenkins-persistent",
        "namespace": "openshift",
        "resourceVersion": "136032",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/jenkins-persistent",
        "uid": "0748b0f2-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "http://{.spec.host}{.spec.path}"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "tls": {
              "insecureEdgeTerminationPolicy": "Redirect",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "${JENKINS_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${JENKINS_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${JENKINS_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "OPENSHIFT_ENABLE_OAUTH",
                        "value": "${ENABLE_OAUTH}"
                      },
                      {
                        "name": "OPENSHIFT_ENABLE_REDIRECT_PROMPT",
                        "value": "true"
                      },
                      {
                        "name": "KUBERNETES_MASTER",
                        "value": "https://kubernetes.default:443"
                      },
                      {
                        "name": "KUBERNETES_TRUST_CERTIFICATES",
                        "value": "true"
                      },
                      {
                        "name": "JENKINS_SERVICE_NAME",
                        "value": "${JENKINS_SERVICE_NAME}"
                      },
                      {
                        "name": "JNLP_SERVICE_NAME",
                        "value": "${JNLP_SERVICE_NAME}"
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "failureThreshold": 30,
                      "httpGet": {
                        "path": "/login",
                        "port": 8080
                      },
                      "initialDelaySeconds": 420,
                      "timeoutSeconds": 3
                    },
                    "name": "jenkins",
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/login",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/jenkins",
                        "name": "${JENKINS_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "serviceAccountName": "${JENKINS_SERVICE_NAME}",
                "volumes": [
                  {
                    "name": "${JENKINS_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${JENKINS_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "jenkins"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${JENKINS_IMAGE_STREAM_TAG}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ServiceAccount",
          "metadata": {
            "annotations": {
              "serviceaccounts.openshift.io/oauth-redirectreference.jenkins": "{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"${JENKINS_SERVICE_NAME}\"}}"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "groupNames": null,
          "kind": "RoleBinding",
          "metadata": {
            "name": "${JENKINS_SERVICE_NAME}_edit"
          },
          "roleRef": {
            "name": "edit"
          },
          "subjects": [
            {
              "kind": "ServiceAccount",
              "name": "${JENKINS_SERVICE_NAME}"
            }
          ]
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "${JNLP_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "agent",
                "nodePort": 0,
                "port": 50000,
                "protocol": "TCP",
                "targetPort": 50000
              }
            ],
            "selector": {
              "name": "${JENKINS_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${JNLP_SERVICE_NAME}\", \"namespace\": \"\", \"kind\": \"Service\"}]",
              "service.openshift.io/infrastructure": "true"
            },
            "name": "${JENKINS_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "nodePort": 0,
                "port": 80,
                "protocol": "TCP",
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${JENKINS_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          }
        }
      ],
      "parameters": [
        {
          "description": "The name of the OpenShift Service exposed for the Jenkins container.",
          "displayName": "Jenkins Service Name",
          "name": "JENKINS_SERVICE_NAME",
          "value": "jenkins"
        },
        {
          "description": "The name of the service used for master/slave communication.",
          "displayName": "Jenkins JNLP Service Name",
          "name": "JNLP_SERVICE_NAME",
          "value": "jenkins-jnlp"
        },
        {
          "description": "Whether to enable OAuth OpenShift integration. If false, the static account 'admin' will be initialized with the password 'password'.",
          "displayName": "Enable OAuth in Jenkins",
          "name": "ENABLE_OAUTH",
          "value": "true"
        },
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The OpenShift Namespace where the Jenkins ImageStream resides.",
          "displayName": "Jenkins ImageStream Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "Name of the ImageStreamTag to be used for the Jenkins image.",
          "displayName": "Jenkins ImageStreamTag",
          "name": "JENKINS_IMAGE_STREAM_TAG",
          "value": "jenkins:latest"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "mariadb-persistent-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.1/README.md.",
      "metadata": {
        "annotations": {
          "description": "MariaDB database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.1/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
          "iconClass": "icon-mariadb",
          "openshift.io/display-name": "MariaDB (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/sclorg/mariadb-container/blob/master/10.1/README.md",
          "openshift.io/long-description": "This template provides a standalone MariaDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,mariadb"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "mariadb-ephemeral",
        "namespace": "openshift",
        "resourceVersion": "136003",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/mariadb-ephemeral",
        "uid": "04fe6cdc-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-name": "${MYSQL_DATABASE}",
            "database-password": "${MYSQL_PASSWORD}",
            "database-root-password": "${MYSQL_ROOT_PASSWORD}",
            "database-user": "${MYSQL_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mariadb\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mariadb",
                "port": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_ROOT_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-root-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mariadb",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mariadb"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mariadb:10.1",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mariadb"
        },
        {
          "description": "Username for MariaDB user that will be used for accessing the database.",
          "displayName": "MariaDB Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "MYSQL_USER",
          "required": true
        },
        {
          "description": "Password for the MariaDB connection user.",
          "displayName": "MariaDB Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_PASSWORD",
          "required": true
        },
        {
          "description": "Password for the MariaDB root user.",
          "displayName": "MariaDB root Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_ROOT_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MariaDB database accessed.",
          "displayName": "MariaDB Database Name",
          "name": "MYSQL_DATABASE",
          "required": true,
          "value": "sampledb"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "mariadb-persistent-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.1/README.md.",
      "metadata": {
        "annotations": {
          "description": "MariaDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mariadb-container/blob/master/10.1/README.md.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
          "iconClass": "icon-mariadb",
          "openshift.io/display-name": "MariaDB (Persistent)",
          "openshift.io/documentation-url": "https://github.com/sclorg/mariadb-container/blob/master/10.1/README.md",
          "openshift.io/long-description": "This template provides a standalone MariaDB server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,mariadb"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "mariadb-persistent",
        "namespace": "openshift",
        "resourceVersion": "136004",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/mariadb-persistent",
        "uid": "04ffdc8c-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-name": "${MYSQL_DATABASE}",
            "database-password": "${MYSQL_PASSWORD}",
            "database-root-password": "${MYSQL_ROOT_PASSWORD}",
            "database-user": "${MYSQL_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mariadb\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mariadb",
                "port": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_ROOT_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-root-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mariadb",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mariadb"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mariadb:10.1",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mariadb"
        },
        {
          "description": "Username for MariaDB user that will be used for accessing the database.",
          "displayName": "MariaDB Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "MYSQL_USER",
          "required": true
        },
        {
          "description": "Password for the MariaDB connection user.",
          "displayName": "MariaDB Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_PASSWORD",
          "required": true
        },
        {
          "description": "Password for the MariaDB root user.",
          "displayName": "MariaDB root Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_ROOT_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MariaDB database accessed.",
          "displayName": "MariaDB Database Name",
          "name": "MYSQL_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "mongodb-ephemeral-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MONGODB_USER}\n       Password: ${MONGODB_PASSWORD}\n  Database Name: ${MONGODB_DATABASE}\n Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}/${MONGODB_DATABASE}\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.",
      "metadata": {
        "annotations": {
          "description": "MongoDB database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
          "iconClass": "icon-mongodb",
          "openshift.io/display-name": "MongoDB (Ephemeral)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mongodb.html",
          "openshift.io/long-description": "This template provides a standalone MongoDB server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,mongodb"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "mongodb-ephemeral",
        "namespace": "openshift",
        "resourceVersion": "136005",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/mongodb-ephemeral",
        "uid": "05042d8a-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-admin_password": "{.data['database-admin-password']}",
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-admin-password": "${MONGODB_ADMIN_PASSWORD}",
            "database-name": "${MONGODB_DATABASE}",
            "database-password": "${MONGODB_PASSWORD}",
            "database-user": "${MONGODB_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "mongodb://{.spec.clusterIP}:{.spec.ports[?(.name==\"mongo\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mongo",
                "nodePort": 0,
                "port": 27017,
                "protocol": "TCP",
                "targetPort": 27017
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "MONGODB_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_ADMIN_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-admin-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 27017
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mongodb",
                    "ports": [
                      {
                        "containerPort": 27017,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                        ]
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mongodb/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mongodb"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mongodb:${MONGODB_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mongodb"
        },
        {
          "description": "Username for MongoDB user that will be used for accessing the database.",
          "displayName": "MongoDB Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "MONGODB_USER",
          "required": true
        },
        {
          "description": "Password for the MongoDB connection user.",
          "displayName": "MongoDB Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MONGODB_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MongoDB database accessed.",
          "displayName": "MongoDB Database Name",
          "name": "MONGODB_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Password for the database admin user.",
          "displayName": "MongoDB Admin Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MONGODB_ADMIN_PASSWORD",
          "required": true
        },
        {
          "description": "Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).",
          "displayName": "Version of MongoDB Image",
          "name": "MONGODB_VERSION",
          "required": true,
          "value": "3.2"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "mongodb-persistent-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MONGODB_USER}\n       Password: ${MONGODB_PASSWORD}\n  Database Name: ${MONGODB_DATABASE}\n Connection URL: mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${DATABASE_SERVICE_NAME}/${MONGODB_DATABASE}\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.",
      "metadata": {
        "annotations": {
          "description": "MongoDB database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mongodb-container/blob/master/3.2/README.md.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
          "iconClass": "icon-mongodb",
          "openshift.io/display-name": "MongoDB (Persistent)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mongodb.html",
          "openshift.io/long-description": "This template provides a standalone MongoDB server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,mongodb"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "mongodb-persistent",
        "namespace": "openshift",
        "resourceVersion": "136006",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/mongodb-persistent",
        "uid": "05056658-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-admin_password": "{.data['database-admin-password']}",
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-admin-password": "${MONGODB_ADMIN_PASSWORD}",
            "database-name": "${MONGODB_DATABASE}",
            "database-password": "${MONGODB_PASSWORD}",
            "database-user": "${MONGODB_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "mongodb://{.spec.clusterIP}:{.spec.ports[?(.name==\"mongo\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mongo",
                "nodePort": 0,
                "port": 27017,
                "protocol": "TCP",
                "targetPort": 27017
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "MONGODB_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_ADMIN_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-admin-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 27017
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mongodb",
                    "ports": [
                      {
                        "containerPort": 27017,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                        ]
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mongodb/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mongodb"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mongodb:${MONGODB_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mongodb"
        },
        {
          "description": "Username for MongoDB user that will be used for accessing the database.",
          "displayName": "MongoDB Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "MONGODB_USER",
          "required": true
        },
        {
          "description": "Password for the MongoDB connection user.",
          "displayName": "MongoDB Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MONGODB_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MongoDB database accessed.",
          "displayName": "MongoDB Database Name",
          "name": "MONGODB_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Password for the database admin user.",
          "displayName": "MongoDB Admin Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MONGODB_ADMIN_PASSWORD",
          "required": true
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "Version of MongoDB image to be used (2.4, 2.6, 3.2 or latest).",
          "displayName": "Version of MongoDB Image",
          "name": "MONGODB_VERSION",
          "required": true,
          "value": "3.2"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "mysql-ephemeral-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/README.md.",
      "metadata": {
        "annotations": {
          "description": "MySQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
          "iconClass": "icon-mysql-database",
          "openshift.io/display-name": "MySQL (Ephemeral)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mysql.html",
          "openshift.io/long-description": "This template provides a standalone MySQL server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,mysql"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "mysql-ephemeral",
        "namespace": "openshift",
        "resourceVersion": "136007",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/mysql-ephemeral",
        "uid": "05078592-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-name": "${MYSQL_DATABASE}",
            "database-password": "${MYSQL_PASSWORD}",
            "database-root-password": "${MYSQL_ROOT_PASSWORD}",
            "database-user": "${MYSQL_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mysql\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mysql",
                "nodePort": 0,
                "port": 3306,
                "protocol": "TCP",
                "targetPort": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_ROOT_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-root-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mysql",
                    "ports": [
                      {
                        "containerPort": 3306,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mysql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mysql:${MYSQL_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mysql"
        },
        {
          "description": "Username for MySQL user that will be used for accessing the database.",
          "displayName": "MySQL Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "MYSQL_USER",
          "required": true
        },
        {
          "description": "Password for the MySQL connection user.",
          "displayName": "MySQL Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_PASSWORD",
          "required": true
        },
        {
          "description": "Password for the MySQL root user.",
          "displayName": "MySQL root user Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_ROOT_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MySQL database accessed.",
          "displayName": "MySQL Database Name",
          "name": "MYSQL_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).",
          "displayName": "Version of MySQL Image",
          "name": "MYSQL_VERSION",
          "required": true,
          "value": "5.7"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "mysql-persistent-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${MYSQL_USER}\n       Password: ${MYSQL_PASSWORD}\n  Database Name: ${MYSQL_DATABASE}\n Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/README.md.",
      "metadata": {
        "annotations": {
          "description": "MySQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/mysql-container/blob/master/5.7/README.md.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
          "iconClass": "icon-mysql-database",
          "openshift.io/display-name": "MySQL (Persistent)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/mysql.html",
          "openshift.io/long-description": "This template provides a standalone MySQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,mysql"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "mysql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136008",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/mysql-persistent",
        "uid": "05099895-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-root_password": "{.data['database-root-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-name": "${MYSQL_DATABASE}",
            "database-password": "${MYSQL_PASSWORD}",
            "database-root-password": "${MYSQL_ROOT_PASSWORD}",
            "database-user": "${MYSQL_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "mysql://{.spec.clusterIP}:{.spec.ports[?(.name==\"mysql\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mysql",
                "port": 3306
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_ROOT_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-root-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 3306
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mysql",
                    "ports": [
                      {
                        "containerPort": 3306
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mysql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mysql:${MYSQL_VERSION}",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mysql"
        },
        {
          "description": "Username for MySQL user that will be used for accessing the database.",
          "displayName": "MySQL Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "MYSQL_USER",
          "required": true
        },
        {
          "description": "Password for the MySQL connection user.",
          "displayName": "MySQL Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_PASSWORD",
          "required": true
        },
        {
          "description": "Password for the MySQL root user.",
          "displayName": "MySQL root user Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "MYSQL_ROOT_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MySQL database accessed.",
          "displayName": "MySQL Database Name",
          "name": "MYSQL_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).",
          "displayName": "Version of MySQL Image",
          "name": "MYSQL_VERSION",
          "required": true,
          "value": "5.7"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "nodejs-mongo-persistent"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Node.js application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.",
          "iconClass": "icon-nodejs",
          "openshift.io/display-name": "Node.js + MongoDB (Persistent)",
          "openshift.io/documentation-url": "https://github.com/openshift/nodejs-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,nodejs",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "nodejs-mongo-persistent",
        "namespace": "openshift",
        "resourceVersion": "136033",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/nodejs-mongo-persistent",
        "uid": "074a85e1-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "database-admin-password": "${DATABASE_ADMIN_PASSWORD}",
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "npm test"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "NPM_MIRROR",
                    "value": "${NPM_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "nodejs:6",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              },
              {
                "generic": {
                  "secret": "${GENERIC_WEBHOOK_SECRET}"
                },
                "type": "Generic"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "MONGODB_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "MONGODB_ADMIN_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-admin-password",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/pagecount",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "nodejs-mongo-persistent",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/pagecount",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "nodejs-mongo-persistent"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mongodb",
                "port": 27017,
                "targetPort": 27017
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MONGODB_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "MONGODB_ADMIN_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-admin-password",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 27017
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mongodb",
                    "ports": [
                      {
                        "containerPort": 27017
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                        ]
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_MONGODB_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mongodb/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mongodb"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mongodb:3.2",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "nodejs-mongo-persistent"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Node.js container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the MongoDB container can use.",
          "displayName": "Memory Limit (MongoDB)",
          "name": "MEMORY_MONGODB_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/nodejs-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "A secret string used to configure the Generic webhook.",
          "displayName": "Generic Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GENERIC_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mongodb"
        },
        {
          "description": "Username for MongoDB user that will be used for accessing the database.",
          "displayName": "MongoDB Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "description": "Password for the MongoDB user.",
          "displayName": "MongoDB Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Password for the database admin user.",
          "displayName": "Database Administrator Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_ADMIN_PASSWORD"
        },
        {
          "description": "The custom NPM mirror URL",
          "displayName": "Custom NPM Mirror URL",
          "name": "NPM_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "nodejs-mongodb-example"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Node.js application with a MongoDB database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/nodejs-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
          "iconClass": "icon-nodejs",
          "openshift.io/display-name": "Node.js + MongoDB (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/openshift/nodejs-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a NodeJS application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,nodejs",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "nodejs-mongodb-example",
        "namespace": "openshift",
        "resourceVersion": "136034",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/nodejs-mongodb-example",
        "uid": "074c442f-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "database-admin-password": "${DATABASE_ADMIN_PASSWORD}",
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "npm test"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "NPM_MIRROR",
                    "value": "${NPM_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "nodejs:6",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              },
              {
                "generic": {
                  "secret": "${GENERIC_WEBHOOK_SECRET}"
                },
                "type": "Generic"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "MONGODB_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "MONGODB_ADMIN_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-admin-password",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/pagecount",
                        "port": 8080
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 3
                    },
                    "name": "nodejs-mongodb-example",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/pagecount",
                        "port": 8080
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "nodejs-mongodb-example"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "mongodb",
                "port": 27017,
                "targetPort": 27017
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MONGODB_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "MONGODB_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "MONGODB_ADMIN_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-admin-password",
                            "name": "${NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 27017
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "mongodb",
                    "ports": [
                      {
                        "containerPort": 27017
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD --eval=\"quit()\""
                        ]
                      },
                      "initialDelaySeconds": 3,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_MONGODB_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mongodb/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "mongodb"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "mongodb:3.2",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "nodejs-mongodb-example"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Node.js container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the MongoDB container can use.",
          "displayName": "Memory Limit (MongoDB)",
          "name": "MEMORY_MONGODB_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/nodejs-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Node.js service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "A secret string used to configure the Generic webhook.",
          "displayName": "Generic Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GENERIC_WEBHOOK_SECRET"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "mongodb"
        },
        {
          "description": "Username for MongoDB user that will be used for accessing the database.",
          "displayName": "MongoDB Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "description": "Password for the MongoDB user.",
          "displayName": "MongoDB Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Password for the database admin user.",
          "displayName": "Database Administrator Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "DATABASE_ADMIN_PASSWORD"
        },
        {
          "description": "The custom NPM mirror URL",
          "displayName": "Custom NPM Mirror URL",
          "name": "NPM_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "postgresql-ephemeral-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${POSTGRESQL_USER}\n       Password: ${POSTGRESQL_PASSWORD}\n  Database Name: ${POSTGRESQL_DATABASE}\n Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/9.5.",
      "metadata": {
        "annotations": {
          "description": "PostgreSQL database service, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/9.5.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
          "iconClass": "icon-postgresql",
          "openshift.io/display-name": "PostgreSQL (Ephemeral)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/postgresql.html",
          "openshift.io/long-description": "This template provides a standalone PostgreSQL server with a database created.  The database is not stored on persistent storage, so any restart of the service will result in all data being lost.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,postgresql"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "postgresql-ephemeral",
        "namespace": "openshift",
        "resourceVersion": "136009",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/postgresql-ephemeral",
        "uid": "050af680-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-name": "${POSTGRESQL_DATABASE}",
            "database-password": "${POSTGRESQL_PASSWORD}",
            "database-user": "${POSTGRESQL_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "postgres://{.spec.clusterIP}:{.spec.ports[?(.name==\"postgresql\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "nodePort": 0,
                "port": 5432,
                "protocol": "TCP",
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:${POSTGRESQL_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "description": "Username for PostgreSQL user that will be used for accessing the database.",
          "displayName": "PostgreSQL Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "POSTGRESQL_USER",
          "required": true
        },
        {
          "description": "Password for the PostgreSQL connection user.",
          "displayName": "PostgreSQL Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "POSTGRESQL_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the PostgreSQL database accessed.",
          "displayName": "PostgreSQL Database Name",
          "name": "POSTGRESQL_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).",
          "displayName": "Version of PostgreSQL Image",
          "name": "POSTGRESQL_VERSION",
          "required": true,
          "value": "9.5"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "postgresql-persistent-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Username: ${POSTGRESQL_USER}\n       Password: ${POSTGRESQL_PASSWORD}\n  Database Name: ${POSTGRESQL_DATABASE}\n Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/9.5.",
      "metadata": {
        "annotations": {
          "description": "PostgreSQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/blob/master/9.5.\n\nNOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.",
          "iconClass": "icon-postgresql",
          "openshift.io/display-name": "PostgreSQL (Persistent)",
          "openshift.io/documentation-url": "https://docs.openshift.org/latest/using_images/db_images/postgresql.html",
          "openshift.io/long-description": "This template provides a standalone PostgreSQL server with a database created.  The database is stored on persistent storage.  The database name, username, and password are chosen via parameters when provisioning this service.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,postgresql"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "postgresql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136010",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/postgresql-persistent",
        "uid": "050cc2ee-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-database_name": "{.data['database-name']}",
              "template.openshift.io/expose-password": "{.data['database-password']}",
              "template.openshift.io/expose-username": "{.data['database-user']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-name": "${POSTGRESQL_DATABASE}",
            "database-password": "${POSTGRESQL_PASSWORD}",
            "database-user": "${POSTGRESQL_USER}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "postgres://{.spec.clusterIP}:{.spec.ports[?(.name==\"postgresql\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "nodePort": 0,
                "port": 5432,
                "protocol": "TCP",
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-name",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:${POSTGRESQL_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "description": "Username for PostgreSQL user that will be used for accessing the database.",
          "displayName": "PostgreSQL Connection Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "POSTGRESQL_USER",
          "required": true
        },
        {
          "description": "Password for the PostgreSQL connection user.",
          "displayName": "PostgreSQL Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "POSTGRESQL_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the PostgreSQL database accessed.",
          "displayName": "PostgreSQL Database Name",
          "name": "POSTGRESQL_DATABASE",
          "required": true,
          "value": "sampledb"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "Version of PostgreSQL image to be used (9.2, 9.4, 9.5 or latest).",
          "displayName": "Version of PostgreSQL Image",
          "name": "POSTGRESQL_VERSION",
          "required": true,
          "value": "9.5"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "rails-pgsql-persistent"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Rails application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.",
          "iconClass": "icon-ruby",
          "openshift.io/display-name": "Rails + PostgreSQL (Persistent)",
          "openshift.io/documentation-url": "https://github.com/openshift/rails-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a Rails application, including a build configuration, application deployment configuration, and database deployment configuration.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,ruby,rails",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "rails-pgsql-persistent",
        "namespace": "openshift",
        "resourceVersion": "136036",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/rails-pgsql-persistent",
        "uid": "075338ac-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "application-password": "${APPLICATION_PASSWORD}",
            "application-user": "${APPLICATION_USER}",
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}",
            "keybase": "${SECRET_KEY_BASE}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "bundle exec rake test"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "RUBYGEM_MIRROR",
                    "value": "${RUBYGEM_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "ruby:2.3",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "recreateParams": {
                "pre": {
                  "execNewPod": {
                    "command": [
                      "./migrate-database.sh"
                    ],
                    "containerName": "${NAME}"
                  },
                  "failurePolicy": "Abort"
                }
              },
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "keybase",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                      },
                      {
                        "name": "POSTGRESQL_SHARED_BUFFERS",
                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                      },
                      {
                        "name": "APPLICATION_DOMAIN",
                        "value": "${APPLICATION_DOMAIN}"
                      },
                      {
                        "name": "APPLICATION_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "application-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "APPLICATION_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "application-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "RAILS_ENV",
                        "value": "${RAILS_ENV}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/articles",
                        "port": 8080
                      },
                      "initialDelaySeconds": 10,
                      "timeoutSeconds": 3
                    },
                    "name": "${NAME}",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/articles",
                        "port": 8080
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "${NAME}"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "port": 5432,
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                      },
                      {
                        "name": "POSTGRESQL_SHARED_BUFFERS",
                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:9.5",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "rails-pgsql-persistent"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Rails container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the PostgreSQL container can use.",
          "displayName": "Memory Limit (PostgreSQL)",
          "name": "MEMORY_POSTGRESQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/rails-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Rails service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "Your secret key for verifying the integrity of signed cookies.",
          "displayName": "Secret Key",
          "from": "[a-z0-9]{127}",
          "generate": "expression",
          "name": "SECRET_KEY_BASE"
        },
        {
          "description": "The application user that is used within the sample application to authorize access on pages.",
          "displayName": "Application Username",
          "name": "APPLICATION_USER",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "The application password that is used within the sample application to authorize access on pages.",
          "displayName": "Application Password",
          "name": "APPLICATION_PASSWORD",
          "required": true,
          "value": "secret"
        },
        {
          "description": "Environment under which the sample application will run. Could be set to production, development or test.",
          "displayName": "Rails Environment",
          "name": "RAILS_ENV",
          "required": true,
          "value": "production"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "displayName": "Database Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{8}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "root"
        },
        {
          "displayName": "Maximum Database Connections",
          "name": "POSTGRESQL_MAX_CONNECTIONS",
          "value": "100"
        },
        {
          "displayName": "Shared Buffer Amount",
          "name": "POSTGRESQL_SHARED_BUFFERS",
          "value": "12MB"
        },
        {
          "description": "The custom RubyGems mirror URL",
          "displayName": "Custom RubyGems Mirror URL",
          "name": "RUBYGEM_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "rails-postgresql-example"
      },
      "message": "The following service(s) have been created in your project: ${NAME}, ${DATABASE_SERVICE_NAME}.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.",
      "metadata": {
        "annotations": {
          "description": "An example Rails application with a PostgreSQL database. For more information about using this template, including OpenShift considerations, see https://github.com/openshift/rails-ex/blob/master/README.md.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing.",
          "iconClass": "icon-ruby",
          "openshift.io/display-name": "Rails + PostgreSQL (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/openshift/rails-ex",
          "openshift.io/long-description": "This template defines resources needed to develop a Rails application, including a build configuration, application deployment configuration, and database deployment configuration.  The database is stored in non-persistent storage, so this configuration should be used for experimental purposes only.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "quickstart,ruby,rails",
          "template.openshift.io/bindable": "false"
        },
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "rails-postgresql-example",
        "namespace": "openshift",
        "resourceVersion": "136037",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/rails-postgresql-example",
        "uid": "07550c57-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "name": "${NAME}"
          },
          "stringData": {
            "application-password": "${APPLICATION_PASSWORD}",
            "application-user": "${APPLICATION_USER}",
            "database-password": "${DATABASE_PASSWORD}",
            "database-user": "${DATABASE_USER}",
            "keybase": "${SECRET_KEY_BASE}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes and load balances the application pods",
              "service.alpha.openshift.io/dependencies": "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
            },
            "name": "${NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "web",
                "port": 8080,
                "targetPort": 8080
              }
            ],
            "selector": {
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "name": "${NAME}"
          },
          "spec": {
            "host": "${APPLICATION_DOMAIN}",
            "to": {
              "kind": "Service",
              "name": "${NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Keeps track of changes in the application image"
            },
            "name": "${NAME}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "BuildConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to build the application",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "output": {
              "to": {
                "kind": "ImageStreamTag",
                "name": "${NAME}:latest"
              }
            },
            "postCommit": {
              "script": "bundle exec rake test"
            },
            "source": {
              "contextDir": "${CONTEXT_DIR}",
              "git": {
                "ref": "${SOURCE_REPOSITORY_REF}",
                "uri": "${SOURCE_REPOSITORY_URL}"
              },
              "type": "Git"
            },
            "strategy": {
              "sourceStrategy": {
                "env": [
                  {
                    "name": "RUBYGEM_MIRROR",
                    "value": "${RUBYGEM_MIRROR}"
                  }
                ],
                "from": {
                  "kind": "ImageStreamTag",
                  "name": "ruby:2.3",
                  "namespace": "${NAMESPACE}"
                }
              },
              "type": "Source"
            },
            "triggers": [
              {
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              },
              {
                "github": {
                  "secret": "${GITHUB_WEBHOOK_SECRET}"
                },
                "type": "GitHub"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the application server",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${NAME}"
            },
            "strategy": {
              "recreateParams": {
                "pre": {
                  "execNewPod": {
                    "command": [
                      "./migrate-database.sh"
                    ],
                    "containerName": "${NAME}"
                  },
                  "failurePolicy": "Abort"
                }
              },
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${NAME}"
                },
                "name": "${NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "DATABASE_SERVICE_NAME",
                        "value": "${DATABASE_SERVICE_NAME}"
                      },
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "keybase",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                      },
                      {
                        "name": "POSTGRESQL_SHARED_BUFFERS",
                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                      },
                      {
                        "name": "APPLICATION_DOMAIN",
                        "value": "${APPLICATION_DOMAIN}"
                      },
                      {
                        "name": "APPLICATION_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "application-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "APPLICATION_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "application-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "RAILS_ENV",
                        "value": "${RAILS_ENV}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/articles",
                        "port": 8080
                      },
                      "initialDelaySeconds": 10,
                      "timeoutSeconds": 3
                    },
                    "name": "${NAME}",
                    "ports": [
                      {
                        "containerPort": 8080
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/articles",
                        "port": 8080
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 3
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "${NAME}"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "${NAME}:latest"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "description": "Exposes the database server"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "postgresql",
                "port": 5432,
                "targetPort": 5432
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "description": "Defines how to deploy the database",
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                },
                "name": "${DATABASE_SERVICE_NAME}"
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "POSTGRESQL_USER",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-user",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${NAME}"
                          }
                        }
                      },
                      {
                        "name": "POSTGRESQL_DATABASE",
                        "value": "${DATABASE_NAME}"
                      },
                      {
                        "name": "POSTGRESQL_MAX_CONNECTIONS",
                        "value": "${POSTGRESQL_MAX_CONNECTIONS}"
                      },
                      {
                        "name": "POSTGRESQL_SHARED_BUFFERS",
                        "value": "${POSTGRESQL_SHARED_BUFFERS}"
                      }
                    ],
                    "image": " ",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 5432
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "postgresql",
                    "ports": [
                      {
                        "containerPort": 5432
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "psql -h 127.0.0.1 -U ${POSTGRESQL_USER} -q -d ${POSTGRESQL_DATABASE} -c 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_POSTGRESQL_LIMIT}"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/pgsql/data",
                        "name": "data"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {},
                    "name": "data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "postgresql"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "postgresql:9.5",
                    "namespace": "${NAMESPACE}"
                  }
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          }
        }
      ],
      "parameters": [
        {
          "description": "The name assigned to all of the frontend objects defined in this template.",
          "displayName": "Name",
          "name": "NAME",
          "required": true,
          "value": "rails-postgresql-example"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "Maximum amount of memory the Rails container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "Maximum amount of memory the PostgreSQL container can use.",
          "displayName": "Memory Limit (PostgreSQL)",
          "name": "MEMORY_POSTGRESQL_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The URL of the repository with your application source code.",
          "displayName": "Git Repository URL",
          "name": "SOURCE_REPOSITORY_URL",
          "required": true,
          "value": "https://github.com/openshift/rails-ex.git"
        },
        {
          "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch.",
          "displayName": "Git Reference",
          "name": "SOURCE_REPOSITORY_REF"
        },
        {
          "description": "Set this to the relative path to your project if it is not in the root of your repository.",
          "displayName": "Context Directory",
          "name": "CONTEXT_DIR"
        },
        {
          "description": "The exposed hostname that will route to the Rails service, if left blank a value will be defaulted.",
          "displayName": "Application Hostname",
          "name": "APPLICATION_DOMAIN"
        },
        {
          "description": "Github trigger secret.  A difficult to guess string encoded as part of the webhook URL.  Not encrypted.",
          "displayName": "GitHub Webhook Secret",
          "from": "[a-zA-Z0-9]{40}",
          "generate": "expression",
          "name": "GITHUB_WEBHOOK_SECRET"
        },
        {
          "description": "Your secret key for verifying the integrity of signed cookies.",
          "displayName": "Secret Key",
          "from": "[a-z0-9]{127}",
          "generate": "expression",
          "name": "SECRET_KEY_BASE"
        },
        {
          "description": "The application user that is used within the sample application to authorize access on pages.",
          "displayName": "Application Username",
          "name": "APPLICATION_USER",
          "required": true,
          "value": "openshift"
        },
        {
          "description": "The application password that is used within the sample application to authorize access on pages.",
          "displayName": "Application Password",
          "name": "APPLICATION_PASSWORD",
          "required": true,
          "value": "secret"
        },
        {
          "description": "Environment under which the sample application will run. Could be set to production, development or test.",
          "displayName": "Rails Environment",
          "name": "RAILS_ENV",
          "required": true,
          "value": "production"
        },
        {
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "postgresql"
        },
        {
          "displayName": "Database Username",
          "from": "user[A-Z0-9]{3}",
          "generate": "expression",
          "name": "DATABASE_USER"
        },
        {
          "displayName": "Database Password",
          "from": "[a-zA-Z0-9]{8}",
          "generate": "expression",
          "name": "DATABASE_PASSWORD"
        },
        {
          "displayName": "Database Name",
          "name": "DATABASE_NAME",
          "required": true,
          "value": "root"
        },
        {
          "displayName": "Maximum Database Connections",
          "name": "POSTGRESQL_MAX_CONNECTIONS",
          "value": "100"
        },
        {
          "displayName": "Shared Buffer Amount",
          "name": "POSTGRESQL_SHARED_BUFFERS",
          "value": "12MB"
        },
        {
          "description": "The custom RubyGems mirror URL",
          "displayName": "Custom RubyGems Mirror URL",
          "name": "RUBYGEM_MIRROR"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "redis-ephemeral-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Password: ${REDIS_PASSWORD}\n Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.",
      "metadata": {
        "annotations": {
          "description": "Redis in-memory data structure store, without persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.\n\nWARNING: Any data stored will be lost upon pod destruction. Only use this template for testing",
          "iconClass": "icon-redis",
          "openshift.io/display-name": "Redis (Ephemeral)",
          "openshift.io/documentation-url": "https://github.com/sclorg/redis-container/tree/master/3.2",
          "openshift.io/long-description": "This template provides a standalone Redis server.  The data is not stored on persistent storage, so any restart of the service will result in all data being lost.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,redis"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "redis-ephemeral",
        "namespace": "openshift",
        "resourceVersion": "136011",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/redis-ephemeral",
        "uid": "050e61bb-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-password": "{.data['database-password']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-password": "${REDIS_PASSWORD}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "redis://{.spec.clusterIP}:{.spec.ports[?(.name==\"redis\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "redis",
                "nodePort": 0,
                "port": 6379,
                "protocol": "TCP",
                "targetPort": 6379
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "REDIS_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 6379
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "redis",
                    "ports": [
                      {
                        "containerPort": 6379,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "test \"$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)\" == \"PONG\""
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/redis/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "emptyDir": {
                      "medium": ""
                    },
                    "name": "${DATABASE_SERVICE_NAME}-data"
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "redis"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "redis:${REDIS_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "redis"
        },
        {
          "description": "Password for the Redis connection user.",
          "displayName": "Redis Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "REDIS_PASSWORD",
          "required": true
        },
        {
          "description": "Version of Redis image to be used (3.2 or latest).",
          "displayName": "Version of Redis Image",
          "name": "REDIS_VERSION",
          "required": true,
          "value": "3.2"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "template": "redis-persistent-template"
      },
      "message": "The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.\n\n       Password: ${REDIS_PASSWORD}\n Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.",
      "metadata": {
        "annotations": {
          "description": "Redis in-memory data structure store, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/redis-container/blob/master/3.2.\n\nNOTE: You must have persistent volumes available in your cluster to use this template.",
          "iconClass": "icon-redis",
          "openshift.io/display-name": "Redis (Persistent)",
          "openshift.io/documentation-url": "https://github.com/sclorg/redis-container/tree/master/3.2",
          "openshift.io/long-description": "This template provides a standalone Redis server.  The data is stored on persistent storage.",
          "openshift.io/provider-display-name": "Red Hat, Inc.",
          "openshift.io/support-url": "https://access.redhat.com",
          "tags": "database,redis"
        },
        "creationTimestamp": "2018-02-23T08:32:01Z",
        "name": "redis-persistent",
        "namespace": "openshift",
        "resourceVersion": "136012",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/redis-persistent",
        "uid": "05102db7-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "Secret",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-password": "{.data['database-password']}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "stringData": {
            "database-password": "${REDIS_PASSWORD}"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "annotations": {
              "template.openshift.io/expose-uri": "redis://{.spec.clusterIP}:{.spec.ports[?(.name==\"redis\")].port}"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "ports": [
              {
                "name": "redis",
                "nodePort": 0,
                "port": 6379,
                "protocol": "TCP",
                "targetPort": 6379
              }
            ],
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "sessionAffinity": "None",
            "type": "ClusterIP"
          },
          "status": {
            "loadBalancer": {}
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "${VOLUME_CAPACITY}"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "annotations": {
              "template.alpha.openshift.io/wait-for-ready": "true"
            },
            "name": "${DATABASE_SERVICE_NAME}"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "${DATABASE_SERVICE_NAME}"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "${DATABASE_SERVICE_NAME}"
                }
              },
              "spec": {
                "containers": [
                  {
                    "capabilities": {},
                    "env": [
                      {
                        "name": "REDIS_PASSWORD",
                        "valueFrom": {
                          "secretKeyRef": {
                            "key": "database-password",
                            "name": "${DATABASE_SERVICE_NAME}"
                          }
                        }
                      }
                    ],
                    "image": " ",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "tcpSocket": {
                        "port": 6379
                      },
                      "timeoutSeconds": 1
                    },
                    "name": "redis",
                    "ports": [
                      {
                        "containerPort": 6379,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "test \"$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD ping)\" == \"PONG\""
                        ]
                      },
                      "initialDelaySeconds": 5,
                      "timeoutSeconds": 1
                    },
                    "resources": {
                      "limits": {
                        "memory": "${MEMORY_LIMIT}"
                      }
                    },
                    "securityContext": {
                      "capabilities": {},
                      "privileged": false
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/redis/data",
                        "name": "${DATABASE_SERVICE_NAME}-data"
                      }
                    ]
                  }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "volumes": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "persistentVolumeClaim": {
                      "claimName": "${DATABASE_SERVICE_NAME}"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "imageChangeParams": {
                  "automatic": true,
                  "containerNames": [
                    "redis"
                  ],
                  "from": {
                    "kind": "ImageStreamTag",
                    "name": "redis:${REDIS_VERSION}",
                    "namespace": "${NAMESPACE}"
                  },
                  "lastTriggeredImage": ""
                },
                "type": "ImageChange"
              },
              {
                "type": "ConfigChange"
              }
            ]
          },
          "status": {}
        }
      ],
      "parameters": [
        {
          "description": "Maximum amount of memory the container can use.",
          "displayName": "Memory Limit",
          "name": "MEMORY_LIMIT",
          "required": true,
          "value": "512Mi"
        },
        {
          "description": "The OpenShift Namespace where the ImageStream resides.",
          "displayName": "Namespace",
          "name": "NAMESPACE",
          "value": "openshift"
        },
        {
          "description": "The name of the OpenShift Service exposed for the database.",
          "displayName": "Database Service Name",
          "name": "DATABASE_SERVICE_NAME",
          "required": true,
          "value": "redis"
        },
        {
          "description": "Password for the Redis connection user.",
          "displayName": "Redis Connection Password",
          "from": "[a-zA-Z0-9]{16}",
          "generate": "expression",
          "name": "REDIS_PASSWORD",
          "required": true
        },
        {
          "description": "Volume space available for data, e.g. 512Mi, 2Gi.",
          "displayName": "Volume Capacity",
          "name": "VOLUME_CAPACITY",
          "required": true,
          "value": "1Gi"
        },
        {
          "description": "Version of Redis image to be used (3.2 or latest).",
          "displayName": "Version of Redis Image",
          "name": "REDIS_VERSION",
          "required": true,
          "value": "3.2"
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "labels": {
        "createdBy": "registry-console-template"
      },
      "metadata": {
        "annotations": {
          "description": "Template for deploying registry web console. Requires cluster-admin.",
          "tags": "infrastructure"
        },
        "creationTimestamp": "2018-02-24T12:32:14Z",
        "name": "registry-console",
        "namespace": "openshift",
        "resourceVersion": "328987",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/registry-console",
        "uid": "be4762d6-195e-11e8-abd1-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "labels": {
              "name": "registry-console"
            },
            "name": "registry-console"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "registry-console"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "registry-console"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "OPENSHIFT_OAUTH_PROVIDER_URL",
                        "value": "${OPENSHIFT_OAUTH_PROVIDER_URL}"
                      },
                      {
                        "name": "OPENSHIFT_OAUTH_CLIENT_ID",
                        "value": "${OPENSHIFT_OAUTH_CLIENT_ID}"
                      },
                      {
                        "name": "KUBERNETES_INSECURE",
                        "value": "false"
                      },
                      {
                        "name": "COCKPIT_KUBE_INSECURE",
                        "value": "false"
                      },
                      {
                        "name": "REGISTRY_ONLY",
                        "value": "true"
                      },
                      {
                        "name": "REGISTRY_HOST",
                        "value": "${REGISTRY_HOST}"
                      }
                    ],
                    "image": "${IMAGE_PREFIX}${IMAGE_BASENAME}:${IMAGE_VERSION}",
                    "livenessProbe": {
                      "failureThreshold": 3,
                      "httpGet": {
                        "path": "/ping",
                        "port": 9090,
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 10,
                      "periodSeconds": 10,
                      "successThreshold": 1,
                      "timeoutSeconds": 5
                    },
                    "name": "registry-console",
                    "ports": [
                      {
                        "containerPort": 9090,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "failureThreshold": 3,
                      "httpGet": {
                        "path": "/ping",
                        "port": 9090,
                        "scheme": "HTTP"
                      },
                      "periodSeconds": 10,
                      "successThreshold": 1,
                      "timeoutSeconds": 5
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "labels": {
              "name": "registry-console"
            },
            "name": "registry-console"
          },
          "spec": {
            "ports": [
              {
                "name": "registry-console",
                "port": 9000,
                "protocol": "TCP",
                "targetPort": 9090
              }
            ],
            "selector": {
              "name": "registry-console"
            },
            "type": "ClusterIP"
          }
        },
        {
          "apiVersion": "v1",
          "kind": "ImageStream",
          "metadata": {
            "annotations": {
              "description": "Atomic Registry console"
            },
            "name": "registry-console"
          },
          "spec": {
            "tags": [
              {
                "annotations": null,
                "from": {
                  "kind": "DockerImage",
                  "name": "${IMAGE_PREFIX}${IMAGE_BASENAME}:${IMAGE_VERSION}"
                },
                "name": "${IMAGE_VERSION}"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "OAuthClient",
          "metadata": {
            "name": "${OPENSHIFT_OAUTH_CLIENT_ID}",
            "respondWithChallenges": false
          },
          "redirectURIs": [
            "${COCKPIT_KUBE_URL}"
          ],
          "secret": "${OPENSHIFT_OAUTH_CLIENT_SECRET}"
        }
      ],
      "parameters": [
        {
          "description": "Specify \"registry/namespace\" prefix for container image; e.g. for \"registry.example.com/cockpit/kubernetes:latest\", set prefix \"registry.example.com/cockpit/\"",
          "name": "IMAGE_PREFIX",
          "value": "cockpit/"
        },
        {
          "description": "Specify component name for container image; e.g. for \"registry.example.com/cockpit/kubernetes:latest\", use base name \"kubernetes\"",
          "name": "IMAGE_BASENAME",
          "value": "kubernetes"
        },
        {
          "description": "Specify image version; e.g. for \"cockpit/kubernetes:latest\", set version \"latest\"",
          "name": "IMAGE_VERSION",
          "value": "latest"
        },
        {
          "description": "The public URL for the Openshift OAuth Provider, e.g. https://openshift.example.com:8443",
          "name": "OPENSHIFT_OAUTH_PROVIDER_URL",
          "required": true
        },
        {
          "description": "The registry console URL. This should be created beforehand using 'oc create route passthrough --service registry-console --port registry-console -n default', e.g. https://registry-console-default.example.com",
          "name": "COCKPIT_KUBE_URL",
          "required": true
        },
        {
          "description": "Oauth client secret",
          "from": "user[a-zA-Z0-9]{64}",
          "generate": "expression",
          "name": "OPENSHIFT_OAUTH_CLIENT_SECRET"
        },
        {
          "description": "Oauth client id",
          "name": "OPENSHIFT_OAUTH_CLIENT_ID",
          "value": "cockpit-oauth-client"
        },
        {
          "description": "The integrated registry hostname exposed via route, e.g. registry.example.com",
          "name": "REGISTRY_HOST",
          "required": true
        }
      ]
    },
    {
      "apiVersion": "v1",
      "kind": "Template",
      "message": "Login on https://${TENANT_NAME}-admin.${WILDCARD_DOMAIN} as ${ADMIN_USERNAME}/${ADMIN_PASSWORD}",
      "metadata": {
        "creationTimestamp": "2018-02-23T08:32:05Z",
        "name": "system",
        "namespace": "openshift",
        "resourceVersion": "136019",
        "selfLink": "/oapi/v1/namespaces/openshift/templates/system",
        "uid": "072e4bc2-1874-11e8-9ee5-000af7b00488"
      },
      "objects": [
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "system-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteMany"
            ],
            "resources": {
              "requests": {
                "storage": "100Mi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "mysql-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "system-redis-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "PersistentVolumeClaim",
          "metadata": {
            "name": "backend-redis-storage"
          },
          "spec": {
            "accessModes": [
              "ReadWriteOnce"
            ],
            "resources": {
              "requests": {
                "storage": "1Gi"
              }
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "backend-cron"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "backend-cron"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "backend-cron"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": [
                      "backend-cron"
                    ],
                    "env": [
                      {
                        "name": "CONFIG_REDIS_PROXY",
                        "value": "backend-redis:6379"
                      },
                      {
                        "name": "CONFIG_QUEUES_MASTER_NAME",
                        "value": "backend-redis:6379/1"
                      },
                      {
                        "name": "RACK_ENV",
                        "value": "production"
                      }
                    ],
                    "image": "3scale-amp20/backend:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "name": "backend-cron"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "backend-redis"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "backend-redis"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "backend-redis"
                }
              },
              "spec": {
                "containers": [
                  {
                    "image": "${REDIS_IMAGE}",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 10,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": 6379
                      }
                    },
                    "name": "backend-redis",
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "container-entrypoint",
                          "bash",
                          "-c",
                          "redis-cli set liveness-probe \"`date`\" | grep OK"
                        ]
                      },
                      "initialDelaySeconds": 10,
                      "periodSeconds": 30,
                      "timeoutSeconds": 1
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/redis/data",
                        "name": "backend-redis-storage"
                      },
                      {
                        "mountPath": "/etc/redis.conf",
                        "name": "redis-config",
                        "subPath": "redis.conf"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "backend-redis-storage",
                    "persistentVolumeClaim": {
                      "claimName": "backend-redis-storage"
                    }
                  },
                  {
                    "configMap": {
                      "items": [
                        {
                          "key": "redis.conf",
                          "path": "redis.conf"
                        }
                      ],
                      "name": "redis-config"
                    },
                    "name": "redis-config"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "backend-listener"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "backend-listener"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "backend-listener"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": [
                      "3scale_backend",
                      "start",
                      "-e",
                      "production",
                      "-p",
                      "3000",
                      "-x",
                      "/dev/stdout"
                    ],
                    "env": [
                      {
                        "name": "CONFIG_REDIS_PROXY",
                        "value": "backend-redis:6379"
                      },
                      {
                        "name": "CONFIG_QUEUES_MASTER_NAME",
                        "value": "backend-redis:6379/1"
                      },
                      {
                        "name": "RACK_ENV",
                        "value": "production"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      }
                    ],
                    "image": "3scale-amp20/backend:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": 3000
                      }
                    },
                    "name": "backend-listener",
                    "ports": [
                      {
                        "containerPort": 3000,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/status",
                        "port": 3000
                      },
                      "initialDelaySeconds": 30,
                      "timeoutSeconds": 5
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "backend-redis"
          },
          "spec": {
            "ports": [
              {
                "port": 6379,
                "protocol": "TCP",
                "targetPort": 6379
              }
            ],
            "selector": {
              "name": "backend-redis"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "backend-listener"
          },
          "spec": {
            "ports": [
              {
                "name": "http",
                "port": 3000,
                "protocol": "TCP",
                "targetPort": 3000
              }
            ],
            "selector": {
              "name": "backend-listener"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "system-provider"
          },
          "spec": {
            "ports": [
              {
                "name": "http",
                "port": 3000,
                "protocol": "TCP",
                "targetPort": "provider"
              }
            ],
            "selector": {
              "name": "system-app"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "system-developer"
          },
          "spec": {
            "ports": [
              {
                "name": "http",
                "port": 3000,
                "protocol": "TCP",
                "targetPort": "developer"
              }
            ],
            "selector": {
              "name": "system-app"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "backend-worker"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "backend-worker"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "backend-worker"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": [
                      "3scale_backend_worker",
                      "run"
                    ],
                    "env": [
                      {
                        "name": "CONFIG_REDIS_PROXY",
                        "value": "backend-redis:6379"
                      },
                      {
                        "name": "CONFIG_QUEUES_MASTER_NAME",
                        "value": "backend-redis:6379/1"
                      },
                      {
                        "name": "RACK_ENV",
                        "value": "production"
                      },
                      {
                        "name": "CONFIG_EVENTS_HOOK",
                        "value": "http://system-provider:3000/master/events/import"
                      },
                      {
                        "name": "CONFIG_EVENTS_HOOK_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      }
                    ],
                    "image": "3scale-amp20/backend:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "name": "backend-worker"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "system-mysql"
          },
          "spec": {
            "ports": [
              {
                "name": "system-mysql",
                "nodePort": 0,
                "port": 3306,
                "protocol": "TCP",
                "targetPort": 3306
              }
            ],
            "selector": {
              "name": "system-mysql"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "system-redis"
          },
          "spec": {
            "ports": [
              {
                "name": "redis",
                "port": 6379,
                "protocol": "TCP",
                "targetPort": 6379
              }
            ],
            "selector": {
              "name": "system-redis"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-redis"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-redis"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-redis"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": null,
                    "image": "${REDIS_IMAGE}",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 10,
                      "periodSeconds": 5,
                      "tcpSocket": {
                        "port": 6379
                      }
                    },
                    "name": "system-redis",
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "container-entrypoint",
                          "bash",
                          "-c",
                          "redis-cli set liveness-probe \"`date`\" | grep OK"
                        ]
                      },
                      "initialDelaySeconds": 30,
                      "periodSeconds": 10,
                      "timeoutSeconds": 5
                    },
                    "terminationMessagePath": "/dev/termination-log",
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/redis/data",
                        "name": "system-redis-storage"
                      },
                      {
                        "mountPath": "/etc/redis.conf",
                        "name": "redis-config",
                        "subPath": "redis.conf"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "system-redis-storage",
                    "persistentVolumeClaim": {
                      "claimName": "system-redis-storage"
                    }
                  },
                  {
                    "configMap": {
                      "items": [
                        {
                          "key": "redis.conf",
                          "path": "redis.conf"
                        }
                      ],
                      "name": "redis-config"
                    },
                    "name": "redis-config"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "system-sphinx"
          },
          "spec": {
            "ports": [
              {
                "name": "sphinx",
                "port": 9306,
                "protocol": "TCP",
                "targetPort": 9306
              }
            ],
            "selector": {
              "name": "system-sphinx"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-sphinx"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-sphinx"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-sphinx"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": [
                      "rake",
                      "openshift:thinking_sphinx:start"
                    ],
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "0.0.0.0"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "db/sphinx/production.conf"
                      },
                      {
                        "name": "THINKING_SPHINX_PID_FILE",
                        "value": "db/sphinx/searchd.pid"
                      },
                      {
                        "name": "DELTA_INDEX_INTERVAL",
                        "value": "5"
                      },
                      {
                        "name": "FULL_REINDEX_INTERVAL",
                        "value": "60"
                      }
                    ],
                    "image": "3scale-amp20/system:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 60,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": 9306
                      }
                    },
                    "name": "system-sphinx",
                    "volumeMounts": [
                      {
                        "mountPath": "/opt/system/db/sphinx",
                        "name": "system-sphinx-database"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "emptyDir": {},
                    "name": "system-sphinx-database"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "system-memcache"
          },
          "spec": {
            "ports": [
              {
                "name": "memcache",
                "port": 11211,
                "protocol": "TCP",
                "targetPort": 11211
              }
            ],
            "selector": {
              "name": "system-memcache"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-memcache"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-memcache"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-memcache"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": null,
                    "command": [
                      "memcached",
                      "-m",
                      "64"
                    ],
                    "env": null,
                    "image": "3scale-amp20/memcached:1.4.15-7",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 10,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": 11211
                      }
                    },
                    "name": "memcache",
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "sh",
                          "-c",
                          "echo version | nc $HOSTNAME 11211 | grep VERSION"
                        ]
                      },
                      "initialDelaySeconds": 10,
                      "periodSeconds": 30,
                      "timeoutSeconds": 5
                    }
                  }
                ],
                "ports": [
                  {
                    "containerPort": 6379,
                    "protocol": "TCP"
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "labels": {
              "app": "system-route"
            },
            "name": "system-provider-admin-route"
          },
          "spec": {
            "host": "${TENANT_NAME}-admin.${WILDCARD_DOMAIN}",
            "port": {
              "targetPort": "http"
            },
            "tls": {
              "insecureEdgeTerminationPolicy": "Allow",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "system-provider"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "labels": {
              "app": "system-route"
            },
            "name": "backend-route"
          },
          "spec": {
            "host": "backend-${TENANT_NAME}.${WILDCARD_DOMAIN}",
            "port": {
              "targetPort": "http"
            },
            "tls": {
              "insecureEdgeTerminationPolicy": "Allow",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "backend-listener"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "labels": {
              "app": "system-route"
            },
            "name": "system-developer-route"
          },
          "spec": {
            "host": "${TENANT_NAME}.${WILDCARD_DOMAIN}",
            "port": {
              "targetPort": "http"
            },
            "tls": {
              "insecureEdgeTerminationPolicy": "Allow",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "system-developer"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "apicast-staging"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "deploymentconfig": "apicast-staging"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 1800,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "deploymentconfig": "apicast-staging"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "THREESCALE_PORTAL_ENDPOINT",
                        "value": "http://${APICAST_ACCESS_TOKEN}@system-provider:3000"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_LOADER",
                        "value": "lazy"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_CACHE",
                        "value": "0"
                      },
                      {
                        "name": "THREESCALE_DEPLOYMENT_ENV",
                        "value": "sandbox"
                      },
                      {
                        "name": "APICAST_MANAGEMENT_API",
                        "value": "${APICAST_MANAGEMENT_API}"
                      },
                      {
                        "name": "BACKEND_ENDPOINT_OVERRIDE",
                        "value": "http://backend-listener:3000"
                      },
                      {
                        "name": "OPENSSL_VERIFY",
                        "value": "${APICAST_OPENSSL_VERIFY}"
                      },
                      {
                        "name": "APICAST_RESPONSE_CODES",
                        "value": "${APICAST_RESPONSE_CODES}"
                      },
                      {
                        "name": "REDIS_URL",
                        "value": "redis://system-redis:6379/2"
                      }
                    ],
                    "image": "3scale-amp20/apicast-gateway:1.0-3",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/status/live",
                        "port": 8090
                      },
                      "initialDelaySeconds": 10,
                      "periodSeconds": 10,
                      "timeoutSeconds": 5
                    },
                    "name": "apicast-staging",
                    "ports": [
                      {
                        "containerPort": 8080,
                        "protocol": "TCP"
                      },
                      {
                        "containerPort": 8090,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/status/ready",
                        "port": 8090
                      },
                      "initialDelaySeconds": 15,
                      "periodSeconds": 30,
                      "timeoutSeconds": 5
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "apicast-staging"
          },
          "spec": {
            "ports": [
              {
                "name": "gateway",
                "port": 8080,
                "protocol": "TCP",
                "targetPort": 8080
              },
              {
                "name": "management",
                "port": 8090,
                "protocol": "TCP",
                "targetPort": 8090
              }
            ],
            "selector": {
              "deploymentconfig": "apicast-staging"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "apicast-production"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "deploymentconfig": "apicast-production"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 1800,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "deploymentconfig": "apicast-production"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "THREESCALE_PORTAL_ENDPOINT",
                        "value": "http://${APICAST_ACCESS_TOKEN}@system-provider:3000"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_LOADER",
                        "value": "boot"
                      },
                      {
                        "name": "APICAST_CONFIGURATION_CACHE",
                        "value": "300"
                      },
                      {
                        "name": "THREESCALE_DEPLOYMENT_ENV",
                        "value": "production"
                      },
                      {
                        "name": "APICAST_MANAGEMENT_API",
                        "value": "${APICAST_MANAGEMENT_API}"
                      },
                      {
                        "name": "BACKEND_ENDPOINT_OVERRIDE",
                        "value": "http://backend-listener:3000"
                      },
                      {
                        "name": "OPENSSL_VERIFY",
                        "value": "${APICAST_OPENSSL_VERIFY}"
                      },
                      {
                        "name": "APICAST_RESPONSE_CODES",
                        "value": "${APICAST_RESPONSE_CODES}"
                      },
                      {
                        "name": "REDIS_URL",
                        "value": "redis://system-redis:6379/1"
                      }
                    ],
                    "image": "3scale-amp20/apicast-gateway:1.0-3",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "httpGet": {
                        "path": "/status/live",
                        "port": 8090
                      },
                      "initialDelaySeconds": 10,
                      "periodSeconds": 10,
                      "timeoutSeconds": 5
                    },
                    "name": "apicast-production",
                    "ports": [
                      {
                        "containerPort": 8080,
                        "protocol": "TCP"
                      },
                      {
                        "containerPort": 8090,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "path": "/status/ready",
                        "port": 8090
                      },
                      "initialDelaySeconds": 15,
                      "periodSeconds": 30,
                      "timeoutSeconds": 5
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Service",
          "metadata": {
            "name": "apicast-production"
          },
          "spec": {
            "ports": [
              {
                "name": "gateway",
                "port": 8080,
                "protocol": "TCP",
                "targetPort": 8080
              },
              {
                "name": "management",
                "port": 8090,
                "protocol": "TCP",
                "targetPort": 8090
              }
            ],
            "selector": {
              "deploymentconfig": "apicast-production"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "labels": {
              "app": "apicast-staging"
            },
            "name": "api-apicast-staging-route"
          },
          "spec": {
            "host": "api-${TENANT_NAME}-apicast-staging.${WILDCARD_DOMAIN}",
            "port": {
              "targetPort": "gateway"
            },
            "tls": {
              "insecureEdgeTerminationPolicy": "Allow",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "apicast-staging"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "Route",
          "metadata": {
            "labels": {
              "app": "apicast-production"
            },
            "name": "api-apicast-production-route"
          },
          "spec": {
            "host": "api-${TENANT_NAME}-apicast-production.${WILDCARD_DOMAIN}",
            "port": {
              "targetPort": "gateway"
            },
            "tls": {
              "insecureEdgeTerminationPolicy": "Allow",
              "termination": "edge"
            },
            "to": {
              "kind": "Service",
              "name": "apicast-production"
            }
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-app"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-app"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "post": {
                  "execNewPod": {
                    "command": [
                      "bash",
                      "-c",
                      "bundle exec rake boot openshift:post_deploy"
                    ],
                    "containerName": "system-provider"
                  },
                  "failurePolicy": "Abort"
                },
                "pre": {
                  "execNewPod": {
                    "command": [
                      "bash",
                      "-c",
                      "bundle exec rake boot openshift:deploy"
                    ],
                    "containerName": "system-provider",
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "FORCE_SSL",
                        "value": "true"
                      },
                      {
                        "name": "THREESCALE_SUPERDOMAIN",
                        "value": "${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "TENANT_NAME",
                        "value": "${TENANT_NAME}"
                      },
                      {
                        "name": "APICAST_ACCESS_TOKEN",
                        "value": "${APICAST_ACCESS_TOKEN}"
                      },
                      {
                        "name": "ADMIN_ACCESS_TOKEN",
                        "value": "${ADMIN_ACCESS_TOKEN}"
                      },
                      {
                        "name": "PROVIDER_PLAN",
                        "value": "enterprise"
                      },
                      {
                        "name": "USER_LOGIN",
                        "value": "${ADMIN_USERNAME}"
                      },
                      {
                        "name": "USER_PASSWORD",
                        "value": "${ADMIN_PASSWORD}"
                      },
                      {
                        "name": "RAILS_LOG_TO_STDOUT",
                        "value": "true"
                      },
                      {
                        "name": "RAILS_LOG_LEVEL",
                        "value": "info"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "system-sphinx"
                      },
                      {
                        "name": "THINKING_SPHINX_PORT",
                        "value": "9306"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "/tmp/sphinx.conf"
                      },
                      {
                        "name": "EVENTS_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      },
                      {
                        "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                        "value": "VERIFY_NONE"
                      },
                      {
                        "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                      },
                      {
                        "name": "AMP_RELEASE",
                        "value": "${AMP_RELEASE}"
                      },
                      {
                        "name": "SMTP_ADDRESS",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "address",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_USER_NAME",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "username",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PASSWORD",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "password",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_DOMAIN",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "domain",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PORT",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "port",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_AUTHENTICATION",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "authentication",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_OPENSSL_VERIFY_MODE",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "openssl.verify.mode",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "BACKEND_ROUTE",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      }
                    ],
                    "volumes": [
                      "system-storage"
                    ]
                  },
                  "failurePolicy": "Retry"
                },
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-app"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": null,
                    "command": [
                      "env",
                      "TENANT_MODE=provider",
                      "PORT=3000",
                      "container-entrypoint",
                      "bundle",
                      "exec",
                      "unicorn",
                      "-c",
                      "config/unicorn.rb"
                    ],
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "FORCE_SSL",
                        "value": "true"
                      },
                      {
                        "name": "THREESCALE_SUPERDOMAIN",
                        "value": "${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "TENANT_NAME",
                        "value": "${TENANT_NAME}"
                      },
                      {
                        "name": "APICAST_ACCESS_TOKEN",
                        "value": "${APICAST_ACCESS_TOKEN}"
                      },
                      {
                        "name": "ADMIN_ACCESS_TOKEN",
                        "value": "${ADMIN_ACCESS_TOKEN}"
                      },
                      {
                        "name": "PROVIDER_PLAN",
                        "value": "enterprise"
                      },
                      {
                        "name": "USER_LOGIN",
                        "value": "${ADMIN_USERNAME}"
                      },
                      {
                        "name": "USER_PASSWORD",
                        "value": "${ADMIN_PASSWORD}"
                      },
                      {
                        "name": "RAILS_LOG_TO_STDOUT",
                        "value": "true"
                      },
                      {
                        "name": "RAILS_LOG_LEVEL",
                        "value": "info"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "system-sphinx"
                      },
                      {
                        "name": "THINKING_SPHINX_PORT",
                        "value": "9306"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "/tmp/sphinx.conf"
                      },
                      {
                        "name": "EVENTS_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      },
                      {
                        "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                        "value": "VERIFY_NONE"
                      },
                      {
                        "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                      },
                      {
                        "name": "AMP_RELEASE",
                        "value": "${AMP_RELEASE}"
                      },
                      {
                        "name": "SMTP_ADDRESS",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "address",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_USER_NAME",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "username",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PASSWORD",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "password",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_DOMAIN",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "domain",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PORT",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "port",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_AUTHENTICATION",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "authentication",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_OPENSSL_VERIFY_MODE",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "openssl.verify.mode",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "BACKEND_ROUTE",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      }
                    ],
                    "image": "3scale-amp20/system:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 20,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": "provider"
                      },
                      "timeoutSeconds": 10
                    },
                    "name": "system-provider",
                    "ports": [
                      {
                        "containerPort": 3000,
                        "name": "provider",
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "httpHeaders": [
                          {
                            "name": "X-Forwarded-Proto",
                            "value": "https"
                          }
                        ],
                        "path": "/check.txt",
                        "port": "provider",
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 30,
                      "periodSeconds": 30,
                      "timeoutSeconds": 10
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/opt/system/public/system",
                        "name": "system-storage"
                      }
                    ]
                  },
                  {
                    "args": null,
                    "command": [
                      "env",
                      "TENANT_MODE=developer",
                      "PORT=3001",
                      "container-entrypoint",
                      "bundle",
                      "exec",
                      "unicorn",
                      "-c",
                      "config/unicorn.rb"
                    ],
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "FORCE_SSL",
                        "value": "true"
                      },
                      {
                        "name": "THREESCALE_SUPERDOMAIN",
                        "value": "${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "TENANT_NAME",
                        "value": "${TENANT_NAME}"
                      },
                      {
                        "name": "APICAST_ACCESS_TOKEN",
                        "value": "${APICAST_ACCESS_TOKEN}"
                      },
                      {
                        "name": "ADMIN_ACCESS_TOKEN",
                        "value": "${ADMIN_ACCESS_TOKEN}"
                      },
                      {
                        "name": "PROVIDER_PLAN",
                        "value": "enterprise"
                      },
                      {
                        "name": "USER_LOGIN",
                        "value": "${ADMIN_USERNAME}"
                      },
                      {
                        "name": "USER_PASSWORD",
                        "value": "${ADMIN_PASSWORD}"
                      },
                      {
                        "name": "RAILS_LOG_TO_STDOUT",
                        "value": "true"
                      },
                      {
                        "name": "RAILS_LOG_LEVEL",
                        "value": "info"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "system-sphinx"
                      },
                      {
                        "name": "THINKING_SPHINX_PORT",
                        "value": "9306"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "/tmp/sphinx.conf"
                      },
                      {
                        "name": "EVENTS_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      },
                      {
                        "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                        "value": "VERIFY_NONE"
                      },
                      {
                        "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                      },
                      {
                        "name": "AMP_RELEASE",
                        "value": "${AMP_RELEASE}"
                      },
                      {
                        "name": "SMTP_ADDRESS",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "address",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_USER_NAME",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "username",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PASSWORD",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "password",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_DOMAIN",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "domain",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PORT",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "port",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_AUTHENTICATION",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "authentication",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_OPENSSL_VERIFY_MODE",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "openssl.verify.mode",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "BACKEND_ROUTE",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      }
                    ],
                    "image": "3scale-amp20/system:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 20,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": "developer"
                      },
                      "timeoutSeconds": 10
                    },
                    "name": "system-developer",
                    "ports": [
                      {
                        "containerPort": 3001,
                        "name": "developer",
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "httpGet": {
                        "httpHeaders": [
                          {
                            "name": "X-Forwarded-Proto",
                            "value": "https"
                          }
                        ],
                        "path": "/check.txt",
                        "port": "developer",
                        "scheme": "HTTP"
                      },
                      "initialDelaySeconds": 30,
                      "periodSeconds": 30,
                      "timeoutSeconds": 10
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/opt/system/public/system",
                        "name": "system-storage",
                        "readOnly": true
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "system-storage",
                    "persistentVolumeClaim": {
                      "claimName": "system-storage"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-resque"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-resque"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-resque"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": [
                      "rake",
                      "resque:work",
                      "QUEUE=*"
                    ],
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "FORCE_SSL",
                        "value": "true"
                      },
                      {
                        "name": "THREESCALE_SUPERDOMAIN",
                        "value": "${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "TENANT_NAME",
                        "value": "${TENANT_NAME}"
                      },
                      {
                        "name": "APICAST_ACCESS_TOKEN",
                        "value": "${APICAST_ACCESS_TOKEN}"
                      },
                      {
                        "name": "ADMIN_ACCESS_TOKEN",
                        "value": "${ADMIN_ACCESS_TOKEN}"
                      },
                      {
                        "name": "PROVIDER_PLAN",
                        "value": "enterprise"
                      },
                      {
                        "name": "USER_LOGIN",
                        "value": "${ADMIN_USERNAME}"
                      },
                      {
                        "name": "USER_PASSWORD",
                        "value": "${ADMIN_PASSWORD}"
                      },
                      {
                        "name": "RAILS_LOG_TO_STDOUT",
                        "value": "true"
                      },
                      {
                        "name": "RAILS_LOG_LEVEL",
                        "value": "info"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "system-sphinx"
                      },
                      {
                        "name": "THINKING_SPHINX_PORT",
                        "value": "9306"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "/tmp/sphinx.conf"
                      },
                      {
                        "name": "EVENTS_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      },
                      {
                        "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                        "value": "VERIFY_NONE"
                      },
                      {
                        "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                      },
                      {
                        "name": "AMP_RELEASE",
                        "value": "${AMP_RELEASE}"
                      },
                      {
                        "name": "SMTP_ADDRESS",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "address",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_USER_NAME",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "username",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PASSWORD",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "password",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_DOMAIN",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "domain",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PORT",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "port",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_AUTHENTICATION",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "authentication",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_OPENSSL_VERIFY_MODE",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "openssl.verify.mode",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "BACKEND_ROUTE",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      }
                    ],
                    "image": "3scale-amp20/system:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "name": "system-resque",
                    "volumeMounts": [
                      {
                        "mountPath": "/opt/system/public/system",
                        "name": "system-storage"
                      }
                    ]
                  },
                  {
                    "args": [
                      "rake",
                      "resque:scheduler",
                      "QUEUE=*"
                    ],
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "FORCE_SSL",
                        "value": "true"
                      },
                      {
                        "name": "THREESCALE_SUPERDOMAIN",
                        "value": "${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "TENANT_NAME",
                        "value": "${TENANT_NAME}"
                      },
                      {
                        "name": "APICAST_ACCESS_TOKEN",
                        "value": "${APICAST_ACCESS_TOKEN}"
                      },
                      {
                        "name": "ADMIN_ACCESS_TOKEN",
                        "value": "${ADMIN_ACCESS_TOKEN}"
                      },
                      {
                        "name": "PROVIDER_PLAN",
                        "value": "enterprise"
                      },
                      {
                        "name": "USER_LOGIN",
                        "value": "${ADMIN_USERNAME}"
                      },
                      {
                        "name": "USER_PASSWORD",
                        "value": "${ADMIN_PASSWORD}"
                      },
                      {
                        "name": "RAILS_LOG_TO_STDOUT",
                        "value": "true"
                      },
                      {
                        "name": "RAILS_LOG_LEVEL",
                        "value": "info"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "system-sphinx"
                      },
                      {
                        "name": "THINKING_SPHINX_PORT",
                        "value": "9306"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "/tmp/sphinx.conf"
                      },
                      {
                        "name": "EVENTS_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      },
                      {
                        "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                        "value": "VERIFY_NONE"
                      },
                      {
                        "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                      },
                      {
                        "name": "AMP_RELEASE",
                        "value": "${AMP_RELEASE}"
                      },
                      {
                        "name": "SMTP_ADDRESS",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "address",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_USER_NAME",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "username",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PASSWORD",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "password",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_DOMAIN",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "domain",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PORT",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "port",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_AUTHENTICATION",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "authentication",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_OPENSSL_VERIFY_MODE",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "openssl.verify.mode",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "BACKEND_ROUTE",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      }
                    ],
                    "image": "3scale-amp20/system:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "name": "system-scheduler"
                  }
                ],
                "volumes": [
                  {
                    "name": "system-storage",
                    "persistentVolumeClaim": {
                      "claimName": "system-storage"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-sidekiq"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-sidekiq"
            },
            "strategy": {
              "rollingParams": {
                "intervalSeconds": 1,
                "maxSurge": "25%",
                "maxUnavailable": "25%",
                "timeoutSeconds": 600,
                "updatePeriodSeconds": 1
              },
              "type": "Rolling"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-sidekiq"
                }
              },
              "spec": {
                "containers": [
                  {
                    "args": [
                      "rake",
                      "sidekiq:worker"
                    ],
                    "env": [
                      {
                        "name": "RAILS_ENV",
                        "value": "production"
                      },
                      {
                        "name": "DATABASE_URL",
                        "value": "mysql2://root:${MYSQL_ROOT_PASSWORD}@system-mysql/${MYSQL_DATABASE}"
                      },
                      {
                        "name": "FORCE_SSL",
                        "value": "true"
                      },
                      {
                        "name": "THREESCALE_SUPERDOMAIN",
                        "value": "${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "TENANT_NAME",
                        "value": "${TENANT_NAME}"
                      },
                      {
                        "name": "APICAST_ACCESS_TOKEN",
                        "value": "${APICAST_ACCESS_TOKEN}"
                      },
                      {
                        "name": "ADMIN_ACCESS_TOKEN",
                        "value": "${ADMIN_ACCESS_TOKEN}"
                      },
                      {
                        "name": "PROVIDER_PLAN",
                        "value": "enterprise"
                      },
                      {
                        "name": "USER_LOGIN",
                        "value": "${ADMIN_USERNAME}"
                      },
                      {
                        "name": "USER_PASSWORD",
                        "value": "${ADMIN_PASSWORD}"
                      },
                      {
                        "name": "RAILS_LOG_TO_STDOUT",
                        "value": "true"
                      },
                      {
                        "name": "RAILS_LOG_LEVEL",
                        "value": "info"
                      },
                      {
                        "name": "THINKING_SPHINX_ADDRESS",
                        "value": "system-sphinx"
                      },
                      {
                        "name": "THINKING_SPHINX_PORT",
                        "value": "9306"
                      },
                      {
                        "name": "THINKING_SPHINX_CONFIGURATION_FILE",
                        "value": "/tmp/sphinx.conf"
                      },
                      {
                        "name": "EVENTS_SHARED_SECRET",
                        "value": "${SYSTEM_BACKEND_SHARED_SECRET}"
                      },
                      {
                        "name": "THREESCALE_SANDBOX_PROXY_OPENSSL_VERIFY_MODE",
                        "value": "VERIFY_NONE"
                      },
                      {
                        "name": "APICAST_BACKEND_ROOT_ENDPOINT",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_USER",
                        "value": "${SYSTEM_BACKEND_USERNAME}"
                      },
                      {
                        "name": "CONFIG_INTERNAL_API_PASSWORD",
                        "value": "${SYSTEM_BACKEND_PASSWORD}"
                      },
                      {
                        "name": "SECRET_KEY_BASE",
                        "value": "${SYSTEM_APP_SECRET_KEY_BASE}"
                      },
                      {
                        "name": "AMP_RELEASE",
                        "value": "${AMP_RELEASE}"
                      },
                      {
                        "name": "SMTP_ADDRESS",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "address",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_USER_NAME",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "username",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PASSWORD",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "password",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_DOMAIN",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "domain",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_PORT",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "port",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_AUTHENTICATION",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "authentication",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "SMTP_OPENSSL_VERIFY_MODE",
                        "valueFrom": {
                          "configMapKeyRef": {
                            "key": "openssl.verify.mode",
                            "name": "smtp"
                          }
                        }
                      },
                      {
                        "name": "BACKEND_ROUTE",
                        "value": "https://backend-${TENANT_NAME}.${WILDCARD_DOMAIN}"
                      }
                    ],
                    "image": "3scale-amp20/system:1.0-2",
                    "imagePullPolicy": "IfNotPresent",
                    "name": "system-sidekiq",
                    "volumeMounts": [
                      {
                        "mountPath": "/opt/system/public/system",
                        "name": "system-storage"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "system-storage",
                    "persistentVolumeClaim": {
                      "claimName": "system-storage"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "kind": "DeploymentConfig",
          "metadata": {
            "name": "system-mysql"
          },
          "spec": {
            "replicas": 1,
            "selector": {
              "name": "system-mysql"
            },
            "strategy": {
              "type": "Recreate"
            },
            "template": {
              "metadata": {
                "labels": {
                  "name": "system-mysql"
                }
              },
              "spec": {
                "containers": [
                  {
                    "env": [
                      {
                        "name": "MYSQL_USER",
                        "value": "${MYSQL_USER}"
                      },
                      {
                        "name": "MYSQL_PASSWORD",
                        "value": "${MYSQL_PASSWORD}"
                      },
                      {
                        "name": "MYSQL_DATABASE",
                        "value": "${MYSQL_DATABASE}"
                      },
                      {
                        "name": "MYSQL_ROOT_PASSWORD",
                        "value": "${MYSQL_ROOT_PASSWORD}"
                      },
                      {
                        "name": "MYSQL_LOWER_CASE_TABLE_NAMES",
                        "value": "1"
                      }
                    ],
                    "image": "${MYSQL_IMAGE}",
                    "imagePullPolicy": "IfNotPresent",
                    "livenessProbe": {
                      "initialDelaySeconds": 30,
                      "periodSeconds": 10,
                      "tcpSocket": {
                        "port": 3306
                      }
                    },
                    "name": "system-mysql",
                    "ports": [
                      {
                        "containerPort": 3306,
                        "protocol": "TCP"
                      }
                    ],
                    "readinessProbe": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-i",
                          "-c",
                          "MYSQL_PWD=\"$MYSQL_PASSWORD\" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE -e 'SELECT 1'"
                        ]
                      },
                      "initialDelaySeconds": 10,
                      "periodSeconds": 30,
                      "timeoutSeconds": 5
                    },
                    "resources": {
                      "limits": {
                        "memory": "2Gi"
                      },
                      "requests": {
                        "cpu": "1",
                        "memory": "1Gi"
                      }
                    },
                    "volumeMounts": [
                      {
                        "mountPath": "/var/lib/mysql/data",
                        "name": "mysql-storage"
                      }
                    ]
                  }
                ],
                "volumes": [
                  {
                    "name": "mysql-storage",
                    "persistentVolumeClaim": {
                      "claimName": "mysql-storage"
                    }
                  }
                ]
              }
            },
            "triggers": [
              {
                "type": "ConfigChange"
              }
            ]
          }
        },
        {
          "apiVersion": "v1",
          "data": {
            "redis.conf": "protected-mode no\n\nport 6379\n\ntimeout 0\ntcp-keepalive 300\n\ndaemonize no\nsupervised no\n\nloglevel notice\n\ndatabases 16\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\nstop-writes-on-bgsave-error yes\n\nrdbcompression yes\nrdbchecksum yes\n\ndbfilename dump.rdb\n\nslave-serve-stale-data yes\nslave-read-only yes\n\nrepl-diskless-sync no\nrepl-disable-tcp-nodelay no\n\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\n\nlua-time-limit 5000\n\nactiverehashing no\n\naof-rewrite-incremental-fsync yes\ndir /var/lib/redis/data\n"
          },
          "kind": "ConfigMap",
          "metadata": {
            "name": "redis-config"
          }
        },
        {
          "apiVersion": "v1",
          "data": {
            "address": "",
            "authentication": "",
            "domain": "",
            "openssl.verify.mode": "",
            "password": "",
            "port": "",
            "username": ""
          },
          "kind": "ConfigMap",
          "metadata": {
            "name": "smtp"
          }
        }
      ],
      "parameters": [
        {
          "description": "AMP release tag.",
          "name": "AMP_RELEASE",
          "required": true,
          "value": "2.0.0-CR2-redhat-1"
        },
        {
          "from": "[a-z0-9]{8}",
          "generate": "expression",
          "name": "ADMIN_PASSWORD",
          "required": true
        },
        {
          "name": "ADMIN_USERNAME",
          "required": true,
          "value": "admin"
        },
        {
          "description": "Read Only Access Token that is APIcast going to use to download its configuration.",
          "from": "[a-z0-9]{8}",
          "generate": "expression",
          "name": "APICAST_ACCESS_TOKEN",
          "required": true
        },
        {
          "description": "Admin Access Token with all scopes and write permissions for API access.",
          "from": "[a-z0-9]{16}",
          "generate": "expression",
          "name": "ADMIN_ACCESS_TOKEN"
        },
        {
          "description": "Root domain for the wildcard routes. Eg. example.com will generate 3scale-admin.example.com.",
          "name": "WILDCARD_DOMAIN",
          "required": true
        },
        {
          "description": "Tenant name under the root that Admin UI will be available with -admin suffix.",
          "name": "TENANT_NAME",
          "required": true,
          "value": "3scale"
        },
        {
          "description": "Username for MySQL user that will be used for accessing the database.",
          "displayName": "MySQL User",
          "name": "MYSQL_USER",
          "required": true,
          "value": "mysql"
        },
        {
          "description": "Password for the MySQL user.",
          "displayName": "MySQL Password",
          "from": "[a-z0-9]{8}",
          "generate": "expression",
          "name": "MYSQL_PASSWORD",
          "required": true
        },
        {
          "description": "Name of the MySQL database accessed.",
          "displayName": "MySQL Database Name",
          "name": "MYSQL_DATABASE",
          "required": true,
          "value": "system"
        },
        {
          "description": "Password for Root user.",
          "displayName": "MySQL Root password.",
          "from": "[a-z0-9]{8}",
          "generate": "expression",
          "name": "MYSQL_ROOT_PASSWORD",
          "required": true
        },
        {
          "description": "Internal 3scale API username for internal 3scale api auth.",
          "name": "SYSTEM_BACKEND_USERNAME",
          "required": true,
          "value": "3scale_api_user"
        },
        {
          "description": "Internal 3scale API password for internal 3scale api auth.",
          "from": "[a-z0-9]{8}",
          "generate": "expression",
          "name": "SYSTEM_BACKEND_PASSWORD",
          "required": true
        },
        {
          "description": "Redis image to use",
          "name": "REDIS_IMAGE",
          "required": true,
          "value": "rhscl/redis-32-rhel7:3.2-5.7"
        },
        {
          "description": "Mysql image to use",
          "name": "MYSQL_IMAGE",
          "required": true,
          "value": "rhscl/mysql-56-rhel7:5.6-13.14"
        },
        {
          "description": "Shared secret to import events from backend to system.",
          "from": "[a-z0-9]{8}",
          "generate": "expression",
          "name": "SYSTEM_BACKEND_SHARED_SECRET",
          "required": true
        },
        {
          "description": "System application secret key base",
          "from": "[a-f0-9]{128}",
          "generate": "expression",
          "name": "SYSTEM_APP_SECRET_KEY_BASE",
          "required": true
        },
        {
          "description": "Scope of the APIcast Management API. Can be disabled, status or debug. At least status required for health checks.",
          "name": "APICAST_MANAGEMENT_API",
          "value": "status"
        },
        {
          "description": "Turn on/off the OpenSSL peer verification when downloading the configuration. Can be set to true/false.",
          "name": "APICAST_OPENSSL_VERIFY",
          "value": "false"
        },
        {
          "description": "Enable logging response codes in APIcast.",
          "name": "APICAST_RESPONSE_CODES",
          "value": "true"
        }
      ]
    }
  ],
  "kind": "List",
  "metadata": {
    "resourceVersion": "",
    "selfLink": ""
  }
}
